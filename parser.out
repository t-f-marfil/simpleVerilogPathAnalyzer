Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    LOCALPARAM

Grammar

Rule 0     S' -> source
Rule 1     source -> moduledec source
Rule 2     source -> empty
Rule 3     moduledec -> MODULE ID paramdec portdec ; modulecontent ENDMODULE
Rule 4     moduledec -> MODULE ID portdec ; modulecontent ENDMODULE
Rule 5     paramdec -> # ( params )
Rule 6     params -> oneparam paramplus
Rule 7     params -> empty
Rule 8     paramplus -> , oneparam paramplus
Rule 9     paramplus -> empty
Rule 10    oneparam -> PARAMETER ID = arithexpr
Rule 11    arithexpr -> NUMBER
Rule 12    arithexpr -> ID
Rule 13    portdec -> ( ports
Rule 14    ports -> porttype portplus
Rule 15    ports -> )
Rule 16    portplus -> wireslice idsterminal portplus
Rule 17    portplus -> empty
Rule 18    idsterminal -> ID portterminal
Rule 19    idsterminal -> ID , idsterminal
Rule 20    portterminal -> )
Rule 21    portterminal -> , porttype
Rule 22    wireslice -> [ arithexpr : arithexpr ]
Rule 23    wireslice -> empty
Rule 24    porttype -> inout
Rule 25    porttype -> inout wiretype
Rule 26    inout -> INPUT
Rule 27    inout -> OUTPUT
Rule 28    modulecontent -> wiredec ; modulecontent
Rule 29    modulecontent -> assign ; modulecontent
Rule 30    modulecontent -> always modulecontent
Rule 31    modulecontent -> moduleinst ; modulecontent
Rule 32    modulecontent -> empty
Rule 33    wiredec -> wiretype [ arithexpr : arithexpr ] idassigns
Rule 34    wiredec -> wiretype [ arithexpr : arithexpr ] ID [ arithexpr : arithexpr ]
Rule 35    wiredec -> wiretype idassigns
Rule 36    idassigns -> oneidassign
Rule 37    idassigns -> oneidassign , idassigns
Rule 38    oneidassign -> ID
Rule 39    oneidassign -> ID = wireexpr
Rule 40    wiretype -> WIRE
Rule 41    wiretype -> REG
Rule 42    wiretype -> LOGIC
Rule 43    assign -> ASSIGN lhs = wireexpr
Rule 44    always -> ALWAYS @ sensitivity alwayscontblock
Rule 45    always -> ALWAYSFF @ sensitivity alwayscontblock
Rule 46    always -> ALWAYSCOMB alwayscontblock
Rule 47    sensitivity -> ( edge ID )
Rule 48    edge -> POSEDGE
Rule 49    edge -> NEGEDGE
Rule 50    alwayscontblock -> BEGIN alwayscont END
Rule 51    alwayscont -> oneassign ; alwayscont
Rule 52    alwayscont -> ifblock alwayscont
Rule 53    alwayscont -> ifblock elseblock alwayscont
Rule 54    alwayscont -> empty
Rule 55    oneassign -> lhs = wireexpr
Rule 56    oneassign -> lhs NONBLOCK wireexpr
Rule 57    ifblock -> IF ( wireexpr ) BEGIN alwayscont END
Rule 58    elseblock -> ELSE ifblock
Rule 59    elseblock -> ELSE ifblock elseblock
Rule 60    elseblock -> ELSE BEGIN alwayscont END
Rule 61    lhs -> ID
Rule 62    lhs -> ID [ arithexpr : arithexpr ]
Rule 63    lhs -> { lhsconcat }
Rule 64    lhsconcat -> lhs
Rule 65    lhsconcat -> lhs , lhsconcat
Rule 66    wireexpr -> wireval
Rule 67    wireexpr -> wireval wireop wireexpr
Rule 68    wireexpr -> wireval ? wireexpr : wireexpr
Rule 69    wireval -> ALLHIGH
Rule 70    wireval -> ALLLOW
Rule 71    wireval -> LITWIRE
Rule 72    wireval -> NUMBER
Rule 73    wireval -> { wireconcat }
Rule 74    wireval -> ( wireexpr )
Rule 75    wireval -> ID [ arithexpr : arithexpr ]
Rule 76    wireval -> ID [ wireexpr ]
Rule 77    wireval -> unaop wireval
Rule 78    unaop -> ~
Rule 79    unaop -> &
Rule 80    unaop -> ^
Rule 81    unaop -> |
Rule 82    wireval -> ID
Rule 83    wireconcat -> wireexpr
Rule 84    wireconcat -> wireexpr , wireconcat
Rule 85    wireop -> +
Rule 86    wireop -> -
Rule 87    wireop -> *
Rule 88    wireop -> &
Rule 89    wireop -> |
Rule 90    wireop -> ^
Rule 91    wireop -> <
Rule 92    wireop -> >
Rule 93    wireop -> LSHIFT
Rule 94    wireop -> RSHIFT
Rule 95    wireop -> EQ
Rule 96    wireop -> GEQ
Rule 97    wireop -> LEQ
Rule 98    moduleinst -> ID ID ( modportassign )
Rule 99    modportassign -> oneportassign
Rule 100   modportassign -> oneportassign , modportassign
Rule 101   modportassign -> empty
Rule 102   oneportassign -> wireexpr
Rule 103   oneportassign -> . ID ( wireexpr )
Rule 104   empty -> <empty>

Terminals, with rules where they appear

#                    : 5
&                    : 79 88
(                    : 5 13 47 57 74 98 103
)                    : 5 15 20 47 57 74 98 103
*                    : 87
+                    : 85
,                    : 8 19 21 37 65 84 100
-                    : 86
.                    : 103
:                    : 22 33 34 34 62 68 75
;                    : 3 4 28 29 31 51
<                    : 91
=                    : 10 39 43 55
>                    : 92
?                    : 68
@                    : 44 45
ALLHIGH              : 69
ALLLOW               : 70
ALWAYS               : 44
ALWAYSCOMB           : 46
ALWAYSFF             : 45
ASSIGN               : 43
BEGIN                : 50 57 60
ELSE                 : 58 59 60
END                  : 50 57 60
ENDMODULE            : 3 4
EQ                   : 95
GEQ                  : 96
ID                   : 3 4 10 12 18 19 34 38 39 47 61 62 75 76 82 98 98 103
IF                   : 57
INPUT                : 26
LEQ                  : 97
LITWIRE              : 71
LOCALPARAM           : 
LOGIC                : 42
LSHIFT               : 93
MODULE               : 3 4
NEGEDGE              : 49
NONBLOCK             : 56
NUMBER               : 11 72
OUTPUT               : 27
PARAMETER            : 10
POSEDGE              : 48
REG                  : 41
RSHIFT               : 94
WIRE                 : 40
[                    : 22 33 34 34 62 75 76
]                    : 22 33 34 34 62 75 76
^                    : 80 90
error                : 
{                    : 63 73
|                    : 81 89
}                    : 63 73
~                    : 78

Nonterminals, with rules where they appear

always               : 30
alwayscont           : 50 51 52 53 57 60
alwayscontblock      : 44 45 46
arithexpr            : 10 22 22 33 33 34 34 34 34 62 62 75 75
assign               : 29
edge                 : 47
elseblock            : 53 59
empty                : 2 7 9 17 23 32 54 101
idassigns            : 33 35 37
idsterminal          : 16 19
ifblock              : 52 53 58 59
inout                : 24 25
lhs                  : 43 55 56 64 65
lhsconcat            : 63 65
modportassign        : 98 100
modulecontent        : 3 4 28 29 30 31
moduledec            : 1
moduleinst           : 31
oneassign            : 51
oneidassign          : 36 37
oneparam             : 6 8
oneportassign        : 99 100
paramdec             : 3
paramplus            : 6 8
params               : 5
portdec              : 3 4
portplus             : 14 16
ports                : 13
portterminal         : 18
porttype             : 14 21
sensitivity          : 44 45
source               : 1 0
unaop                : 77
wireconcat           : 73 84
wiredec              : 28
wireexpr             : 39 43 55 56 57 67 68 68 74 76 83 84 102 103
wireop               : 67
wireslice            : 16
wiretype             : 25 33 34 35
wireval              : 66 67 68 77

Parsing method: LALR

state 0

    (0) S' -> . source
    (1) source -> . moduledec source
    (2) source -> . empty
    (3) moduledec -> . MODULE ID paramdec portdec ; modulecontent ENDMODULE
    (4) moduledec -> . MODULE ID portdec ; modulecontent ENDMODULE
    (104) empty -> .

    MODULE          shift and go to state 4
    $end            reduce using rule 104 (empty -> .)

    source                         shift and go to state 1
    moduledec                      shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> source .



state 2

    (1) source -> moduledec . source
    (1) source -> . moduledec source
    (2) source -> . empty
    (3) moduledec -> . MODULE ID paramdec portdec ; modulecontent ENDMODULE
    (4) moduledec -> . MODULE ID portdec ; modulecontent ENDMODULE
    (104) empty -> .

    MODULE          shift and go to state 4
    $end            reduce using rule 104 (empty -> .)

    moduledec                      shift and go to state 2
    source                         shift and go to state 5
    empty                          shift and go to state 3

state 3

    (2) source -> empty .

    $end            reduce using rule 2 (source -> empty .)


state 4

    (3) moduledec -> MODULE . ID paramdec portdec ; modulecontent ENDMODULE
    (4) moduledec -> MODULE . ID portdec ; modulecontent ENDMODULE

    ID              shift and go to state 6


state 5

    (1) source -> moduledec source .

    $end            reduce using rule 1 (source -> moduledec source .)


state 6

    (3) moduledec -> MODULE ID . paramdec portdec ; modulecontent ENDMODULE
    (4) moduledec -> MODULE ID . portdec ; modulecontent ENDMODULE
    (5) paramdec -> . # ( params )
    (13) portdec -> . ( ports

    #               shift and go to state 9
    (               shift and go to state 10

    paramdec                       shift and go to state 7
    portdec                        shift and go to state 8

state 7

    (3) moduledec -> MODULE ID paramdec . portdec ; modulecontent ENDMODULE
    (13) portdec -> . ( ports

    (               shift and go to state 10

    portdec                        shift and go to state 11

state 8

    (4) moduledec -> MODULE ID portdec . ; modulecontent ENDMODULE

    ;               shift and go to state 12


state 9

    (5) paramdec -> # . ( params )

    (               shift and go to state 13


state 10

    (13) portdec -> ( . ports
    (14) ports -> . porttype portplus
    (15) ports -> . )
    (24) porttype -> . inout
    (25) porttype -> . inout wiretype
    (26) inout -> . INPUT
    (27) inout -> . OUTPUT

    )               shift and go to state 16
    INPUT           shift and go to state 18
    OUTPUT          shift and go to state 19

    ports                          shift and go to state 14
    porttype                       shift and go to state 15
    inout                          shift and go to state 17

state 11

    (3) moduledec -> MODULE ID paramdec portdec . ; modulecontent ENDMODULE

    ;               shift and go to state 20


state 12

    (4) moduledec -> MODULE ID portdec ; . modulecontent ENDMODULE
    (28) modulecontent -> . wiredec ; modulecontent
    (29) modulecontent -> . assign ; modulecontent
    (30) modulecontent -> . always modulecontent
    (31) modulecontent -> . moduleinst ; modulecontent
    (32) modulecontent -> . empty
    (33) wiredec -> . wiretype [ arithexpr : arithexpr ] idassigns
    (34) wiredec -> . wiretype [ arithexpr : arithexpr ] ID [ arithexpr : arithexpr ]
    (35) wiredec -> . wiretype idassigns
    (43) assign -> . ASSIGN lhs = wireexpr
    (44) always -> . ALWAYS @ sensitivity alwayscontblock
    (45) always -> . ALWAYSFF @ sensitivity alwayscontblock
    (46) always -> . ALWAYSCOMB alwayscontblock
    (98) moduleinst -> . ID ID ( modportassign )
    (104) empty -> .
    (40) wiretype -> . WIRE
    (41) wiretype -> . REG
    (42) wiretype -> . LOGIC

    ASSIGN          shift and go to state 29
    ALWAYS          shift and go to state 30
    ALWAYSFF        shift and go to state 31
    ALWAYSCOMB      shift and go to state 32
    ID              shift and go to state 21
    ENDMODULE       reduce using rule 104 (empty -> .)
    WIRE            shift and go to state 33
    REG             shift and go to state 34
    LOGIC           shift and go to state 35

    modulecontent                  shift and go to state 22
    wiredec                        shift and go to state 23
    assign                         shift and go to state 24
    always                         shift and go to state 25
    moduleinst                     shift and go to state 26
    empty                          shift and go to state 27
    wiretype                       shift and go to state 28

state 13

    (5) paramdec -> # ( . params )
    (6) params -> . oneparam paramplus
    (7) params -> . empty
    (10) oneparam -> . PARAMETER ID = arithexpr
    (104) empty -> .

    PARAMETER       shift and go to state 39
    )               reduce using rule 104 (empty -> .)

    params                         shift and go to state 36
    oneparam                       shift and go to state 37
    empty                          shift and go to state 38

state 14

    (13) portdec -> ( ports .

    ;               reduce using rule 13 (portdec -> ( ports .)


state 15

    (14) ports -> porttype . portplus
    (16) portplus -> . wireslice idsterminal portplus
    (17) portplus -> . empty
    (22) wireslice -> . [ arithexpr : arithexpr ]
    (23) wireslice -> . empty
    (104) empty -> .

    [               shift and go to state 43
    ;               reduce using rule 104 (empty -> .)
    ID              reduce using rule 104 (empty -> .)

    portplus                       shift and go to state 40
    wireslice                      shift and go to state 41
    empty                          shift and go to state 42

state 16

    (15) ports -> ) .

    ;               reduce using rule 15 (ports -> ) .)


state 17

    (24) porttype -> inout .
    (25) porttype -> inout . wiretype
    (40) wiretype -> . WIRE
    (41) wiretype -> . REG
    (42) wiretype -> . LOGIC

    [               reduce using rule 24 (porttype -> inout .)
    ID              reduce using rule 24 (porttype -> inout .)
    ;               reduce using rule 24 (porttype -> inout .)
    WIRE            shift and go to state 33
    REG             shift and go to state 34
    LOGIC           shift and go to state 35

    wiretype                       shift and go to state 44

state 18

    (26) inout -> INPUT .

    WIRE            reduce using rule 26 (inout -> INPUT .)
    REG             reduce using rule 26 (inout -> INPUT .)
    LOGIC           reduce using rule 26 (inout -> INPUT .)
    [               reduce using rule 26 (inout -> INPUT .)
    ID              reduce using rule 26 (inout -> INPUT .)
    ;               reduce using rule 26 (inout -> INPUT .)


state 19

    (27) inout -> OUTPUT .

    WIRE            reduce using rule 27 (inout -> OUTPUT .)
    REG             reduce using rule 27 (inout -> OUTPUT .)
    LOGIC           reduce using rule 27 (inout -> OUTPUT .)
    [               reduce using rule 27 (inout -> OUTPUT .)
    ID              reduce using rule 27 (inout -> OUTPUT .)
    ;               reduce using rule 27 (inout -> OUTPUT .)


state 20

    (3) moduledec -> MODULE ID paramdec portdec ; . modulecontent ENDMODULE
    (28) modulecontent -> . wiredec ; modulecontent
    (29) modulecontent -> . assign ; modulecontent
    (30) modulecontent -> . always modulecontent
    (31) modulecontent -> . moduleinst ; modulecontent
    (32) modulecontent -> . empty
    (33) wiredec -> . wiretype [ arithexpr : arithexpr ] idassigns
    (34) wiredec -> . wiretype [ arithexpr : arithexpr ] ID [ arithexpr : arithexpr ]
    (35) wiredec -> . wiretype idassigns
    (43) assign -> . ASSIGN lhs = wireexpr
    (44) always -> . ALWAYS @ sensitivity alwayscontblock
    (45) always -> . ALWAYSFF @ sensitivity alwayscontblock
    (46) always -> . ALWAYSCOMB alwayscontblock
    (98) moduleinst -> . ID ID ( modportassign )
    (104) empty -> .
    (40) wiretype -> . WIRE
    (41) wiretype -> . REG
    (42) wiretype -> . LOGIC

    ASSIGN          shift and go to state 29
    ALWAYS          shift and go to state 30
    ALWAYSFF        shift and go to state 31
    ALWAYSCOMB      shift and go to state 32
    ID              shift and go to state 21
    ENDMODULE       reduce using rule 104 (empty -> .)
    WIRE            shift and go to state 33
    REG             shift and go to state 34
    LOGIC           shift and go to state 35

    modulecontent                  shift and go to state 45
    wiredec                        shift and go to state 23
    assign                         shift and go to state 24
    always                         shift and go to state 25
    moduleinst                     shift and go to state 26
    empty                          shift and go to state 27
    wiretype                       shift and go to state 28

state 21

    (98) moduleinst -> ID . ID ( modportassign )

    ID              shift and go to state 46


state 22

    (4) moduledec -> MODULE ID portdec ; modulecontent . ENDMODULE

    ENDMODULE       shift and go to state 47


state 23

    (28) modulecontent -> wiredec . ; modulecontent

    ;               shift and go to state 48


state 24

    (29) modulecontent -> assign . ; modulecontent

    ;               shift and go to state 49


state 25

    (30) modulecontent -> always . modulecontent
    (28) modulecontent -> . wiredec ; modulecontent
    (29) modulecontent -> . assign ; modulecontent
    (30) modulecontent -> . always modulecontent
    (31) modulecontent -> . moduleinst ; modulecontent
    (32) modulecontent -> . empty
    (33) wiredec -> . wiretype [ arithexpr : arithexpr ] idassigns
    (34) wiredec -> . wiretype [ arithexpr : arithexpr ] ID [ arithexpr : arithexpr ]
    (35) wiredec -> . wiretype idassigns
    (43) assign -> . ASSIGN lhs = wireexpr
    (44) always -> . ALWAYS @ sensitivity alwayscontblock
    (45) always -> . ALWAYSFF @ sensitivity alwayscontblock
    (46) always -> . ALWAYSCOMB alwayscontblock
    (98) moduleinst -> . ID ID ( modportassign )
    (104) empty -> .
    (40) wiretype -> . WIRE
    (41) wiretype -> . REG
    (42) wiretype -> . LOGIC

    ASSIGN          shift and go to state 29
    ALWAYS          shift and go to state 30
    ALWAYSFF        shift and go to state 31
    ALWAYSCOMB      shift and go to state 32
    ID              shift and go to state 21
    ENDMODULE       reduce using rule 104 (empty -> .)
    WIRE            shift and go to state 33
    REG             shift and go to state 34
    LOGIC           shift and go to state 35

    always                         shift and go to state 25
    modulecontent                  shift and go to state 50
    wiredec                        shift and go to state 23
    assign                         shift and go to state 24
    moduleinst                     shift and go to state 26
    empty                          shift and go to state 27
    wiretype                       shift and go to state 28

state 26

    (31) modulecontent -> moduleinst . ; modulecontent

    ;               shift and go to state 51


state 27

    (32) modulecontent -> empty .

    ENDMODULE       reduce using rule 32 (modulecontent -> empty .)


state 28

    (33) wiredec -> wiretype . [ arithexpr : arithexpr ] idassigns
    (34) wiredec -> wiretype . [ arithexpr : arithexpr ] ID [ arithexpr : arithexpr ]
    (35) wiredec -> wiretype . idassigns
    (36) idassigns -> . oneidassign
    (37) idassigns -> . oneidassign , idassigns
    (38) oneidassign -> . ID
    (39) oneidassign -> . ID = wireexpr

    [               shift and go to state 52
    ID              shift and go to state 54

    idassigns                      shift and go to state 53
    oneidassign                    shift and go to state 55

state 29

    (43) assign -> ASSIGN . lhs = wireexpr
    (61) lhs -> . ID
    (62) lhs -> . ID [ arithexpr : arithexpr ]
    (63) lhs -> . { lhsconcat }

    ID              shift and go to state 57
    {               shift and go to state 58

    lhs                            shift and go to state 56

state 30

    (44) always -> ALWAYS . @ sensitivity alwayscontblock

    @               shift and go to state 59


state 31

    (45) always -> ALWAYSFF . @ sensitivity alwayscontblock

    @               shift and go to state 60


state 32

    (46) always -> ALWAYSCOMB . alwayscontblock
    (50) alwayscontblock -> . BEGIN alwayscont END

    BEGIN           shift and go to state 62

    alwayscontblock                shift and go to state 61

state 33

    (40) wiretype -> WIRE .

    [               reduce using rule 40 (wiretype -> WIRE .)
    ID              reduce using rule 40 (wiretype -> WIRE .)
    ;               reduce using rule 40 (wiretype -> WIRE .)


state 34

    (41) wiretype -> REG .

    [               reduce using rule 41 (wiretype -> REG .)
    ID              reduce using rule 41 (wiretype -> REG .)
    ;               reduce using rule 41 (wiretype -> REG .)


state 35

    (42) wiretype -> LOGIC .

    [               reduce using rule 42 (wiretype -> LOGIC .)
    ID              reduce using rule 42 (wiretype -> LOGIC .)
    ;               reduce using rule 42 (wiretype -> LOGIC .)


state 36

    (5) paramdec -> # ( params . )

    )               shift and go to state 63


state 37

    (6) params -> oneparam . paramplus
    (8) paramplus -> . , oneparam paramplus
    (9) paramplus -> . empty
    (104) empty -> .

    ,               shift and go to state 65
    )               reduce using rule 104 (empty -> .)

    paramplus                      shift and go to state 64
    empty                          shift and go to state 66

state 38

    (7) params -> empty .

    )               reduce using rule 7 (params -> empty .)


state 39

    (10) oneparam -> PARAMETER . ID = arithexpr

    ID              shift and go to state 67


state 40

    (14) ports -> porttype portplus .

    ;               reduce using rule 14 (ports -> porttype portplus .)


state 41

    (16) portplus -> wireslice . idsterminal portplus
    (18) idsterminal -> . ID portterminal
    (19) idsterminal -> . ID , idsterminal

    ID              shift and go to state 69

    idsterminal                    shift and go to state 68

state 42

    (17) portplus -> empty .
    (23) wireslice -> empty .

    ;               reduce using rule 17 (portplus -> empty .)
    ID              reduce using rule 23 (wireslice -> empty .)


state 43

    (22) wireslice -> [ . arithexpr : arithexpr ]
    (11) arithexpr -> . NUMBER
    (12) arithexpr -> . ID

    NUMBER          shift and go to state 71
    ID              shift and go to state 72

    arithexpr                      shift and go to state 70

state 44

    (25) porttype -> inout wiretype .

    [               reduce using rule 25 (porttype -> inout wiretype .)
    ID              reduce using rule 25 (porttype -> inout wiretype .)
    ;               reduce using rule 25 (porttype -> inout wiretype .)


state 45

    (3) moduledec -> MODULE ID paramdec portdec ; modulecontent . ENDMODULE

    ENDMODULE       shift and go to state 73


state 46

    (98) moduleinst -> ID ID . ( modportassign )

    (               shift and go to state 74


state 47

    (4) moduledec -> MODULE ID portdec ; modulecontent ENDMODULE .

    MODULE          reduce using rule 4 (moduledec -> MODULE ID portdec ; modulecontent ENDMODULE .)
    $end            reduce using rule 4 (moduledec -> MODULE ID portdec ; modulecontent ENDMODULE .)


state 48

    (28) modulecontent -> wiredec ; . modulecontent
    (28) modulecontent -> . wiredec ; modulecontent
    (29) modulecontent -> . assign ; modulecontent
    (30) modulecontent -> . always modulecontent
    (31) modulecontent -> . moduleinst ; modulecontent
    (32) modulecontent -> . empty
    (33) wiredec -> . wiretype [ arithexpr : arithexpr ] idassigns
    (34) wiredec -> . wiretype [ arithexpr : arithexpr ] ID [ arithexpr : arithexpr ]
    (35) wiredec -> . wiretype idassigns
    (43) assign -> . ASSIGN lhs = wireexpr
    (44) always -> . ALWAYS @ sensitivity alwayscontblock
    (45) always -> . ALWAYSFF @ sensitivity alwayscontblock
    (46) always -> . ALWAYSCOMB alwayscontblock
    (98) moduleinst -> . ID ID ( modportassign )
    (104) empty -> .
    (40) wiretype -> . WIRE
    (41) wiretype -> . REG
    (42) wiretype -> . LOGIC

    ASSIGN          shift and go to state 29
    ALWAYS          shift and go to state 30
    ALWAYSFF        shift and go to state 31
    ALWAYSCOMB      shift and go to state 32
    ID              shift and go to state 21
    ENDMODULE       reduce using rule 104 (empty -> .)
    WIRE            shift and go to state 33
    REG             shift and go to state 34
    LOGIC           shift and go to state 35

    wiredec                        shift and go to state 23
    modulecontent                  shift and go to state 75
    assign                         shift and go to state 24
    always                         shift and go to state 25
    moduleinst                     shift and go to state 26
    empty                          shift and go to state 27
    wiretype                       shift and go to state 28

state 49

    (29) modulecontent -> assign ; . modulecontent
    (28) modulecontent -> . wiredec ; modulecontent
    (29) modulecontent -> . assign ; modulecontent
    (30) modulecontent -> . always modulecontent
    (31) modulecontent -> . moduleinst ; modulecontent
    (32) modulecontent -> . empty
    (33) wiredec -> . wiretype [ arithexpr : arithexpr ] idassigns
    (34) wiredec -> . wiretype [ arithexpr : arithexpr ] ID [ arithexpr : arithexpr ]
    (35) wiredec -> . wiretype idassigns
    (43) assign -> . ASSIGN lhs = wireexpr
    (44) always -> . ALWAYS @ sensitivity alwayscontblock
    (45) always -> . ALWAYSFF @ sensitivity alwayscontblock
    (46) always -> . ALWAYSCOMB alwayscontblock
    (98) moduleinst -> . ID ID ( modportassign )
    (104) empty -> .
    (40) wiretype -> . WIRE
    (41) wiretype -> . REG
    (42) wiretype -> . LOGIC

    ASSIGN          shift and go to state 29
    ALWAYS          shift and go to state 30
    ALWAYSFF        shift and go to state 31
    ALWAYSCOMB      shift and go to state 32
    ID              shift and go to state 21
    ENDMODULE       reduce using rule 104 (empty -> .)
    WIRE            shift and go to state 33
    REG             shift and go to state 34
    LOGIC           shift and go to state 35

    assign                         shift and go to state 24
    modulecontent                  shift and go to state 76
    wiredec                        shift and go to state 23
    always                         shift and go to state 25
    moduleinst                     shift and go to state 26
    empty                          shift and go to state 27
    wiretype                       shift and go to state 28

state 50

    (30) modulecontent -> always modulecontent .

    ENDMODULE       reduce using rule 30 (modulecontent -> always modulecontent .)


state 51

    (31) modulecontent -> moduleinst ; . modulecontent
    (28) modulecontent -> . wiredec ; modulecontent
    (29) modulecontent -> . assign ; modulecontent
    (30) modulecontent -> . always modulecontent
    (31) modulecontent -> . moduleinst ; modulecontent
    (32) modulecontent -> . empty
    (33) wiredec -> . wiretype [ arithexpr : arithexpr ] idassigns
    (34) wiredec -> . wiretype [ arithexpr : arithexpr ] ID [ arithexpr : arithexpr ]
    (35) wiredec -> . wiretype idassigns
    (43) assign -> . ASSIGN lhs = wireexpr
    (44) always -> . ALWAYS @ sensitivity alwayscontblock
    (45) always -> . ALWAYSFF @ sensitivity alwayscontblock
    (46) always -> . ALWAYSCOMB alwayscontblock
    (98) moduleinst -> . ID ID ( modportassign )
    (104) empty -> .
    (40) wiretype -> . WIRE
    (41) wiretype -> . REG
    (42) wiretype -> . LOGIC

    ASSIGN          shift and go to state 29
    ALWAYS          shift and go to state 30
    ALWAYSFF        shift and go to state 31
    ALWAYSCOMB      shift and go to state 32
    ID              shift and go to state 21
    ENDMODULE       reduce using rule 104 (empty -> .)
    WIRE            shift and go to state 33
    REG             shift and go to state 34
    LOGIC           shift and go to state 35

    moduleinst                     shift and go to state 26
    modulecontent                  shift and go to state 77
    wiredec                        shift and go to state 23
    assign                         shift and go to state 24
    always                         shift and go to state 25
    empty                          shift and go to state 27
    wiretype                       shift and go to state 28

state 52

    (33) wiredec -> wiretype [ . arithexpr : arithexpr ] idassigns
    (34) wiredec -> wiretype [ . arithexpr : arithexpr ] ID [ arithexpr : arithexpr ]
    (11) arithexpr -> . NUMBER
    (12) arithexpr -> . ID

    NUMBER          shift and go to state 71
    ID              shift and go to state 72

    arithexpr                      shift and go to state 78

state 53

    (35) wiredec -> wiretype idassigns .

    ;               reduce using rule 35 (wiredec -> wiretype idassigns .)


state 54

    (38) oneidassign -> ID .
    (39) oneidassign -> ID . = wireexpr

    ,               reduce using rule 38 (oneidassign -> ID .)
    ;               reduce using rule 38 (oneidassign -> ID .)
    =               shift and go to state 79


state 55

    (36) idassigns -> oneidassign .
    (37) idassigns -> oneidassign . , idassigns

    ;               reduce using rule 36 (idassigns -> oneidassign .)
    ,               shift and go to state 80


state 56

    (43) assign -> ASSIGN lhs . = wireexpr

    =               shift and go to state 81


state 57

    (61) lhs -> ID .
    (62) lhs -> ID . [ arithexpr : arithexpr ]

    =               reduce using rule 61 (lhs -> ID .)
    ,               reduce using rule 61 (lhs -> ID .)
    }               reduce using rule 61 (lhs -> ID .)
    NONBLOCK        reduce using rule 61 (lhs -> ID .)
    [               shift and go to state 82


state 58

    (63) lhs -> { . lhsconcat }
    (64) lhsconcat -> . lhs
    (65) lhsconcat -> . lhs , lhsconcat
    (61) lhs -> . ID
    (62) lhs -> . ID [ arithexpr : arithexpr ]
    (63) lhs -> . { lhsconcat }

    ID              shift and go to state 57
    {               shift and go to state 58

    lhsconcat                      shift and go to state 83
    lhs                            shift and go to state 84

state 59

    (44) always -> ALWAYS @ . sensitivity alwayscontblock
    (47) sensitivity -> . ( edge ID )

    (               shift and go to state 86

    sensitivity                    shift and go to state 85

state 60

    (45) always -> ALWAYSFF @ . sensitivity alwayscontblock
    (47) sensitivity -> . ( edge ID )

    (               shift and go to state 86

    sensitivity                    shift and go to state 87

state 61

    (46) always -> ALWAYSCOMB alwayscontblock .

    ASSIGN          reduce using rule 46 (always -> ALWAYSCOMB alwayscontblock .)
    ALWAYS          reduce using rule 46 (always -> ALWAYSCOMB alwayscontblock .)
    ALWAYSFF        reduce using rule 46 (always -> ALWAYSCOMB alwayscontblock .)
    ALWAYSCOMB      reduce using rule 46 (always -> ALWAYSCOMB alwayscontblock .)
    ID              reduce using rule 46 (always -> ALWAYSCOMB alwayscontblock .)
    WIRE            reduce using rule 46 (always -> ALWAYSCOMB alwayscontblock .)
    REG             reduce using rule 46 (always -> ALWAYSCOMB alwayscontblock .)
    LOGIC           reduce using rule 46 (always -> ALWAYSCOMB alwayscontblock .)
    ENDMODULE       reduce using rule 46 (always -> ALWAYSCOMB alwayscontblock .)


state 62

    (50) alwayscontblock -> BEGIN . alwayscont END
    (51) alwayscont -> . oneassign ; alwayscont
    (52) alwayscont -> . ifblock alwayscont
    (53) alwayscont -> . ifblock elseblock alwayscont
    (54) alwayscont -> . empty
    (55) oneassign -> . lhs = wireexpr
    (56) oneassign -> . lhs NONBLOCK wireexpr
    (57) ifblock -> . IF ( wireexpr ) BEGIN alwayscont END
    (104) empty -> .
    (61) lhs -> . ID
    (62) lhs -> . ID [ arithexpr : arithexpr ]
    (63) lhs -> . { lhsconcat }

    IF              shift and go to state 93
    END             reduce using rule 104 (empty -> .)
    ID              shift and go to state 57
    {               shift and go to state 58

    alwayscont                     shift and go to state 88
    oneassign                      shift and go to state 89
    ifblock                        shift and go to state 90
    empty                          shift and go to state 91
    lhs                            shift and go to state 92

state 63

    (5) paramdec -> # ( params ) .

    (               reduce using rule 5 (paramdec -> # ( params ) .)


state 64

    (6) params -> oneparam paramplus .

    )               reduce using rule 6 (params -> oneparam paramplus .)


state 65

    (8) paramplus -> , . oneparam paramplus
    (10) oneparam -> . PARAMETER ID = arithexpr

    PARAMETER       shift and go to state 39

    oneparam                       shift and go to state 94

state 66

    (9) paramplus -> empty .

    )               reduce using rule 9 (paramplus -> empty .)


state 67

    (10) oneparam -> PARAMETER ID . = arithexpr

    =               shift and go to state 95


state 68

    (16) portplus -> wireslice idsterminal . portplus
    (16) portplus -> . wireslice idsterminal portplus
    (17) portplus -> . empty
    (22) wireslice -> . [ arithexpr : arithexpr ]
    (23) wireslice -> . empty
    (104) empty -> .

    [               shift and go to state 43
    ;               reduce using rule 104 (empty -> .)
    ID              reduce using rule 104 (empty -> .)

    wireslice                      shift and go to state 41
    portplus                       shift and go to state 96
    empty                          shift and go to state 42

state 69

    (18) idsterminal -> ID . portterminal
    (19) idsterminal -> ID . , idsterminal
    (20) portterminal -> . )
    (21) portterminal -> . , porttype

    ,               shift and go to state 98
    )               shift and go to state 99

    portterminal                   shift and go to state 97

state 70

    (22) wireslice -> [ arithexpr . : arithexpr ]

    :               shift and go to state 100


state 71

    (11) arithexpr -> NUMBER .

    :               reduce using rule 11 (arithexpr -> NUMBER .)
    ,               reduce using rule 11 (arithexpr -> NUMBER .)
    )               reduce using rule 11 (arithexpr -> NUMBER .)
    ]               reduce using rule 11 (arithexpr -> NUMBER .)


state 72

    (12) arithexpr -> ID .

    :               reduce using rule 12 (arithexpr -> ID .)
    ,               reduce using rule 12 (arithexpr -> ID .)
    )               reduce using rule 12 (arithexpr -> ID .)
    ]               reduce using rule 12 (arithexpr -> ID .)


state 73

    (3) moduledec -> MODULE ID paramdec portdec ; modulecontent ENDMODULE .

    MODULE          reduce using rule 3 (moduledec -> MODULE ID paramdec portdec ; modulecontent ENDMODULE .)
    $end            reduce using rule 3 (moduledec -> MODULE ID paramdec portdec ; modulecontent ENDMODULE .)


state 74

    (98) moduleinst -> ID ID ( . modportassign )
    (99) modportassign -> . oneportassign
    (100) modportassign -> . oneportassign , modportassign
    (101) modportassign -> . empty
    (102) oneportassign -> . wireexpr
    (103) oneportassign -> . . ID ( wireexpr )
    (104) empty -> .
    (66) wireexpr -> . wireval
    (67) wireexpr -> . wireval wireop wireexpr
    (68) wireexpr -> . wireval ? wireexpr : wireexpr
    (69) wireval -> . ALLHIGH
    (70) wireval -> . ALLLOW
    (71) wireval -> . LITWIRE
    (72) wireval -> . NUMBER
    (73) wireval -> . { wireconcat }
    (74) wireval -> . ( wireexpr )
    (75) wireval -> . ID [ arithexpr : arithexpr ]
    (76) wireval -> . ID [ wireexpr ]
    (77) wireval -> . unaop wireval
    (82) wireval -> . ID
    (78) unaop -> . ~
    (79) unaop -> . &
    (80) unaop -> . ^
    (81) unaop -> . |

    .               shift and go to state 107
    )               reduce using rule 104 (empty -> .)
    ALLHIGH         shift and go to state 109
    ALLLOW          shift and go to state 110
    LITWIRE         shift and go to state 111
    NUMBER          shift and go to state 112
    {               shift and go to state 113
    (               shift and go to state 102
    ID              shift and go to state 101
    ~               shift and go to state 115
    &               shift and go to state 116
    ^               shift and go to state 117
    |               shift and go to state 118

    modportassign                  shift and go to state 103
    oneportassign                  shift and go to state 104
    empty                          shift and go to state 105
    wireexpr                       shift and go to state 106
    wireval                        shift and go to state 108
    unaop                          shift and go to state 114

state 75

    (28) modulecontent -> wiredec ; modulecontent .

    ENDMODULE       reduce using rule 28 (modulecontent -> wiredec ; modulecontent .)


state 76

    (29) modulecontent -> assign ; modulecontent .

    ENDMODULE       reduce using rule 29 (modulecontent -> assign ; modulecontent .)


state 77

    (31) modulecontent -> moduleinst ; modulecontent .

    ENDMODULE       reduce using rule 31 (modulecontent -> moduleinst ; modulecontent .)


state 78

    (33) wiredec -> wiretype [ arithexpr . : arithexpr ] idassigns
    (34) wiredec -> wiretype [ arithexpr . : arithexpr ] ID [ arithexpr : arithexpr ]

    :               shift and go to state 119


state 79

    (39) oneidassign -> ID = . wireexpr
    (66) wireexpr -> . wireval
    (67) wireexpr -> . wireval wireop wireexpr
    (68) wireexpr -> . wireval ? wireexpr : wireexpr
    (69) wireval -> . ALLHIGH
    (70) wireval -> . ALLLOW
    (71) wireval -> . LITWIRE
    (72) wireval -> . NUMBER
    (73) wireval -> . { wireconcat }
    (74) wireval -> . ( wireexpr )
    (75) wireval -> . ID [ arithexpr : arithexpr ]
    (76) wireval -> . ID [ wireexpr ]
    (77) wireval -> . unaop wireval
    (82) wireval -> . ID
    (78) unaop -> . ~
    (79) unaop -> . &
    (80) unaop -> . ^
    (81) unaop -> . |

    ALLHIGH         shift and go to state 109
    ALLLOW          shift and go to state 110
    LITWIRE         shift and go to state 111
    NUMBER          shift and go to state 112
    {               shift and go to state 113
    (               shift and go to state 102
    ID              shift and go to state 101
    ~               shift and go to state 115
    &               shift and go to state 116
    ^               shift and go to state 117
    |               shift and go to state 118

    wireexpr                       shift and go to state 120
    wireval                        shift and go to state 108
    unaop                          shift and go to state 114

state 80

    (37) idassigns -> oneidassign , . idassigns
    (36) idassigns -> . oneidassign
    (37) idassigns -> . oneidassign , idassigns
    (38) oneidassign -> . ID
    (39) oneidassign -> . ID = wireexpr

    ID              shift and go to state 54

    oneidassign                    shift and go to state 55
    idassigns                      shift and go to state 121

state 81

    (43) assign -> ASSIGN lhs = . wireexpr
    (66) wireexpr -> . wireval
    (67) wireexpr -> . wireval wireop wireexpr
    (68) wireexpr -> . wireval ? wireexpr : wireexpr
    (69) wireval -> . ALLHIGH
    (70) wireval -> . ALLLOW
    (71) wireval -> . LITWIRE
    (72) wireval -> . NUMBER
    (73) wireval -> . { wireconcat }
    (74) wireval -> . ( wireexpr )
    (75) wireval -> . ID [ arithexpr : arithexpr ]
    (76) wireval -> . ID [ wireexpr ]
    (77) wireval -> . unaop wireval
    (82) wireval -> . ID
    (78) unaop -> . ~
    (79) unaop -> . &
    (80) unaop -> . ^
    (81) unaop -> . |

    ALLHIGH         shift and go to state 109
    ALLLOW          shift and go to state 110
    LITWIRE         shift and go to state 111
    NUMBER          shift and go to state 112
    {               shift and go to state 113
    (               shift and go to state 102
    ID              shift and go to state 101
    ~               shift and go to state 115
    &               shift and go to state 116
    ^               shift and go to state 117
    |               shift and go to state 118

    wireexpr                       shift and go to state 122
    wireval                        shift and go to state 108
    unaop                          shift and go to state 114

state 82

    (62) lhs -> ID [ . arithexpr : arithexpr ]
    (11) arithexpr -> . NUMBER
    (12) arithexpr -> . ID

    NUMBER          shift and go to state 71
    ID              shift and go to state 72

    arithexpr                      shift and go to state 123

state 83

    (63) lhs -> { lhsconcat . }

    }               shift and go to state 124


state 84

    (64) lhsconcat -> lhs .
    (65) lhsconcat -> lhs . , lhsconcat

    }               reduce using rule 64 (lhsconcat -> lhs .)
    ,               shift and go to state 125


state 85

    (44) always -> ALWAYS @ sensitivity . alwayscontblock
    (50) alwayscontblock -> . BEGIN alwayscont END

    BEGIN           shift and go to state 62

    alwayscontblock                shift and go to state 126

state 86

    (47) sensitivity -> ( . edge ID )
    (48) edge -> . POSEDGE
    (49) edge -> . NEGEDGE

    POSEDGE         shift and go to state 128
    NEGEDGE         shift and go to state 129

    edge                           shift and go to state 127

state 87

    (45) always -> ALWAYSFF @ sensitivity . alwayscontblock
    (50) alwayscontblock -> . BEGIN alwayscont END

    BEGIN           shift and go to state 62

    alwayscontblock                shift and go to state 130

state 88

    (50) alwayscontblock -> BEGIN alwayscont . END

    END             shift and go to state 131


state 89

    (51) alwayscont -> oneassign . ; alwayscont

    ;               shift and go to state 132


state 90

    (52) alwayscont -> ifblock . alwayscont
    (53) alwayscont -> ifblock . elseblock alwayscont
    (51) alwayscont -> . oneassign ; alwayscont
    (52) alwayscont -> . ifblock alwayscont
    (53) alwayscont -> . ifblock elseblock alwayscont
    (54) alwayscont -> . empty
    (58) elseblock -> . ELSE ifblock
    (59) elseblock -> . ELSE ifblock elseblock
    (60) elseblock -> . ELSE BEGIN alwayscont END
    (55) oneassign -> . lhs = wireexpr
    (56) oneassign -> . lhs NONBLOCK wireexpr
    (57) ifblock -> . IF ( wireexpr ) BEGIN alwayscont END
    (104) empty -> .
    (61) lhs -> . ID
    (62) lhs -> . ID [ arithexpr : arithexpr ]
    (63) lhs -> . { lhsconcat }

    ELSE            shift and go to state 135
    IF              shift and go to state 93
    END             reduce using rule 104 (empty -> .)
    ID              shift and go to state 57
    {               shift and go to state 58

    ifblock                        shift and go to state 90
    alwayscont                     shift and go to state 133
    elseblock                      shift and go to state 134
    oneassign                      shift and go to state 89
    empty                          shift and go to state 91
    lhs                            shift and go to state 92

state 91

    (54) alwayscont -> empty .

    END             reduce using rule 54 (alwayscont -> empty .)


state 92

    (55) oneassign -> lhs . = wireexpr
    (56) oneassign -> lhs . NONBLOCK wireexpr

    =               shift and go to state 136
    NONBLOCK        shift and go to state 137


state 93

    (57) ifblock -> IF . ( wireexpr ) BEGIN alwayscont END

    (               shift and go to state 138


state 94

    (8) paramplus -> , oneparam . paramplus
    (8) paramplus -> . , oneparam paramplus
    (9) paramplus -> . empty
    (104) empty -> .

    ,               shift and go to state 65
    )               reduce using rule 104 (empty -> .)

    paramplus                      shift and go to state 139
    empty                          shift and go to state 66

state 95

    (10) oneparam -> PARAMETER ID = . arithexpr
    (11) arithexpr -> . NUMBER
    (12) arithexpr -> . ID

    NUMBER          shift and go to state 71
    ID              shift and go to state 72

    arithexpr                      shift and go to state 140

state 96

    (16) portplus -> wireslice idsterminal portplus .

    ;               reduce using rule 16 (portplus -> wireslice idsterminal portplus .)


state 97

    (18) idsterminal -> ID portterminal .

    [               reduce using rule 18 (idsterminal -> ID portterminal .)
    ID              reduce using rule 18 (idsterminal -> ID portterminal .)
    ;               reduce using rule 18 (idsterminal -> ID portterminal .)


state 98

    (19) idsterminal -> ID , . idsterminal
    (21) portterminal -> , . porttype
    (18) idsterminal -> . ID portterminal
    (19) idsterminal -> . ID , idsterminal
    (24) porttype -> . inout
    (25) porttype -> . inout wiretype
    (26) inout -> . INPUT
    (27) inout -> . OUTPUT

    ID              shift and go to state 69
    INPUT           shift and go to state 18
    OUTPUT          shift and go to state 19

    idsterminal                    shift and go to state 141
    porttype                       shift and go to state 142
    inout                          shift and go to state 17

state 99

    (20) portterminal -> ) .

    [               reduce using rule 20 (portterminal -> ) .)
    ID              reduce using rule 20 (portterminal -> ) .)
    ;               reduce using rule 20 (portterminal -> ) .)


state 100

    (22) wireslice -> [ arithexpr : . arithexpr ]
    (11) arithexpr -> . NUMBER
    (12) arithexpr -> . ID

    NUMBER          shift and go to state 71
    ID              shift and go to state 72

    arithexpr                      shift and go to state 143

state 101

    (75) wireval -> ID . [ arithexpr : arithexpr ]
    (76) wireval -> ID . [ wireexpr ]
    (82) wireval -> ID .

    [               shift and go to state 144
    ?               reduce using rule 82 (wireval -> ID .)
    +               reduce using rule 82 (wireval -> ID .)
    -               reduce using rule 82 (wireval -> ID .)
    *               reduce using rule 82 (wireval -> ID .)
    &               reduce using rule 82 (wireval -> ID .)
    |               reduce using rule 82 (wireval -> ID .)
    ^               reduce using rule 82 (wireval -> ID .)
    <               reduce using rule 82 (wireval -> ID .)
    >               reduce using rule 82 (wireval -> ID .)
    LSHIFT          reduce using rule 82 (wireval -> ID .)
    RSHIFT          reduce using rule 82 (wireval -> ID .)
    EQ              reduce using rule 82 (wireval -> ID .)
    GEQ             reduce using rule 82 (wireval -> ID .)
    LEQ             reduce using rule 82 (wireval -> ID .)
    ,               reduce using rule 82 (wireval -> ID .)
    )               reduce using rule 82 (wireval -> ID .)
    ;               reduce using rule 82 (wireval -> ID .)
    }               reduce using rule 82 (wireval -> ID .)
    ]               reduce using rule 82 (wireval -> ID .)
    :               reduce using rule 82 (wireval -> ID .)


state 102

    (74) wireval -> ( . wireexpr )
    (66) wireexpr -> . wireval
    (67) wireexpr -> . wireval wireop wireexpr
    (68) wireexpr -> . wireval ? wireexpr : wireexpr
    (69) wireval -> . ALLHIGH
    (70) wireval -> . ALLLOW
    (71) wireval -> . LITWIRE
    (72) wireval -> . NUMBER
    (73) wireval -> . { wireconcat }
    (74) wireval -> . ( wireexpr )
    (75) wireval -> . ID [ arithexpr : arithexpr ]
    (76) wireval -> . ID [ wireexpr ]
    (77) wireval -> . unaop wireval
    (82) wireval -> . ID
    (78) unaop -> . ~
    (79) unaop -> . &
    (80) unaop -> . ^
    (81) unaop -> . |

    ALLHIGH         shift and go to state 109
    ALLLOW          shift and go to state 110
    LITWIRE         shift and go to state 111
    NUMBER          shift and go to state 112
    {               shift and go to state 113
    (               shift and go to state 102
    ID              shift and go to state 101
    ~               shift and go to state 115
    &               shift and go to state 116
    ^               shift and go to state 117
    |               shift and go to state 118

    wireexpr                       shift and go to state 145
    wireval                        shift and go to state 108
    unaop                          shift and go to state 114

state 103

    (98) moduleinst -> ID ID ( modportassign . )

    )               shift and go to state 146


state 104

    (99) modportassign -> oneportassign .
    (100) modportassign -> oneportassign . , modportassign

    )               reduce using rule 99 (modportassign -> oneportassign .)
    ,               shift and go to state 147


state 105

    (101) modportassign -> empty .

    )               reduce using rule 101 (modportassign -> empty .)


state 106

    (102) oneportassign -> wireexpr .

    ,               reduce using rule 102 (oneportassign -> wireexpr .)
    )               reduce using rule 102 (oneportassign -> wireexpr .)


state 107

    (103) oneportassign -> . . ID ( wireexpr )

    ID              shift and go to state 148


state 108

    (66) wireexpr -> wireval .
    (67) wireexpr -> wireval . wireop wireexpr
    (68) wireexpr -> wireval . ? wireexpr : wireexpr
    (85) wireop -> . +
    (86) wireop -> . -
    (87) wireop -> . *
    (88) wireop -> . &
    (89) wireop -> . |
    (90) wireop -> . ^
    (91) wireop -> . <
    (92) wireop -> . >
    (93) wireop -> . LSHIFT
    (94) wireop -> . RSHIFT
    (95) wireop -> . EQ
    (96) wireop -> . GEQ
    (97) wireop -> . LEQ

    ,               reduce using rule 66 (wireexpr -> wireval .)
    )               reduce using rule 66 (wireexpr -> wireval .)
    ;               reduce using rule 66 (wireexpr -> wireval .)
    }               reduce using rule 66 (wireexpr -> wireval .)
    ]               reduce using rule 66 (wireexpr -> wireval .)
    :               reduce using rule 66 (wireexpr -> wireval .)
    ?               shift and go to state 150
    +               shift and go to state 151
    -               shift and go to state 152
    *               shift and go to state 153
    &               shift and go to state 154
    |               shift and go to state 155
    ^               shift and go to state 156
    <               shift and go to state 157
    >               shift and go to state 158
    LSHIFT          shift and go to state 159
    RSHIFT          shift and go to state 160
    EQ              shift and go to state 161
    GEQ             shift and go to state 162
    LEQ             shift and go to state 163

    wireop                         shift and go to state 149

state 109

    (69) wireval -> ALLHIGH .

    ?               reduce using rule 69 (wireval -> ALLHIGH .)
    +               reduce using rule 69 (wireval -> ALLHIGH .)
    -               reduce using rule 69 (wireval -> ALLHIGH .)
    *               reduce using rule 69 (wireval -> ALLHIGH .)
    &               reduce using rule 69 (wireval -> ALLHIGH .)
    |               reduce using rule 69 (wireval -> ALLHIGH .)
    ^               reduce using rule 69 (wireval -> ALLHIGH .)
    <               reduce using rule 69 (wireval -> ALLHIGH .)
    >               reduce using rule 69 (wireval -> ALLHIGH .)
    LSHIFT          reduce using rule 69 (wireval -> ALLHIGH .)
    RSHIFT          reduce using rule 69 (wireval -> ALLHIGH .)
    EQ              reduce using rule 69 (wireval -> ALLHIGH .)
    GEQ             reduce using rule 69 (wireval -> ALLHIGH .)
    LEQ             reduce using rule 69 (wireval -> ALLHIGH .)
    ,               reduce using rule 69 (wireval -> ALLHIGH .)
    )               reduce using rule 69 (wireval -> ALLHIGH .)
    ;               reduce using rule 69 (wireval -> ALLHIGH .)
    }               reduce using rule 69 (wireval -> ALLHIGH .)
    ]               reduce using rule 69 (wireval -> ALLHIGH .)
    :               reduce using rule 69 (wireval -> ALLHIGH .)


state 110

    (70) wireval -> ALLLOW .

    ?               reduce using rule 70 (wireval -> ALLLOW .)
    +               reduce using rule 70 (wireval -> ALLLOW .)
    -               reduce using rule 70 (wireval -> ALLLOW .)
    *               reduce using rule 70 (wireval -> ALLLOW .)
    &               reduce using rule 70 (wireval -> ALLLOW .)
    |               reduce using rule 70 (wireval -> ALLLOW .)
    ^               reduce using rule 70 (wireval -> ALLLOW .)
    <               reduce using rule 70 (wireval -> ALLLOW .)
    >               reduce using rule 70 (wireval -> ALLLOW .)
    LSHIFT          reduce using rule 70 (wireval -> ALLLOW .)
    RSHIFT          reduce using rule 70 (wireval -> ALLLOW .)
    EQ              reduce using rule 70 (wireval -> ALLLOW .)
    GEQ             reduce using rule 70 (wireval -> ALLLOW .)
    LEQ             reduce using rule 70 (wireval -> ALLLOW .)
    ,               reduce using rule 70 (wireval -> ALLLOW .)
    )               reduce using rule 70 (wireval -> ALLLOW .)
    ;               reduce using rule 70 (wireval -> ALLLOW .)
    }               reduce using rule 70 (wireval -> ALLLOW .)
    ]               reduce using rule 70 (wireval -> ALLLOW .)
    :               reduce using rule 70 (wireval -> ALLLOW .)


state 111

    (71) wireval -> LITWIRE .

    ?               reduce using rule 71 (wireval -> LITWIRE .)
    +               reduce using rule 71 (wireval -> LITWIRE .)
    -               reduce using rule 71 (wireval -> LITWIRE .)
    *               reduce using rule 71 (wireval -> LITWIRE .)
    &               reduce using rule 71 (wireval -> LITWIRE .)
    |               reduce using rule 71 (wireval -> LITWIRE .)
    ^               reduce using rule 71 (wireval -> LITWIRE .)
    <               reduce using rule 71 (wireval -> LITWIRE .)
    >               reduce using rule 71 (wireval -> LITWIRE .)
    LSHIFT          reduce using rule 71 (wireval -> LITWIRE .)
    RSHIFT          reduce using rule 71 (wireval -> LITWIRE .)
    EQ              reduce using rule 71 (wireval -> LITWIRE .)
    GEQ             reduce using rule 71 (wireval -> LITWIRE .)
    LEQ             reduce using rule 71 (wireval -> LITWIRE .)
    ,               reduce using rule 71 (wireval -> LITWIRE .)
    )               reduce using rule 71 (wireval -> LITWIRE .)
    ;               reduce using rule 71 (wireval -> LITWIRE .)
    }               reduce using rule 71 (wireval -> LITWIRE .)
    ]               reduce using rule 71 (wireval -> LITWIRE .)
    :               reduce using rule 71 (wireval -> LITWIRE .)


state 112

    (72) wireval -> NUMBER .

    ?               reduce using rule 72 (wireval -> NUMBER .)
    +               reduce using rule 72 (wireval -> NUMBER .)
    -               reduce using rule 72 (wireval -> NUMBER .)
    *               reduce using rule 72 (wireval -> NUMBER .)
    &               reduce using rule 72 (wireval -> NUMBER .)
    |               reduce using rule 72 (wireval -> NUMBER .)
    ^               reduce using rule 72 (wireval -> NUMBER .)
    <               reduce using rule 72 (wireval -> NUMBER .)
    >               reduce using rule 72 (wireval -> NUMBER .)
    LSHIFT          reduce using rule 72 (wireval -> NUMBER .)
    RSHIFT          reduce using rule 72 (wireval -> NUMBER .)
    EQ              reduce using rule 72 (wireval -> NUMBER .)
    GEQ             reduce using rule 72 (wireval -> NUMBER .)
    LEQ             reduce using rule 72 (wireval -> NUMBER .)
    ,               reduce using rule 72 (wireval -> NUMBER .)
    )               reduce using rule 72 (wireval -> NUMBER .)
    ;               reduce using rule 72 (wireval -> NUMBER .)
    }               reduce using rule 72 (wireval -> NUMBER .)
    ]               reduce using rule 72 (wireval -> NUMBER .)
    :               reduce using rule 72 (wireval -> NUMBER .)


state 113

    (73) wireval -> { . wireconcat }
    (83) wireconcat -> . wireexpr
    (84) wireconcat -> . wireexpr , wireconcat
    (66) wireexpr -> . wireval
    (67) wireexpr -> . wireval wireop wireexpr
    (68) wireexpr -> . wireval ? wireexpr : wireexpr
    (69) wireval -> . ALLHIGH
    (70) wireval -> . ALLLOW
    (71) wireval -> . LITWIRE
    (72) wireval -> . NUMBER
    (73) wireval -> . { wireconcat }
    (74) wireval -> . ( wireexpr )
    (75) wireval -> . ID [ arithexpr : arithexpr ]
    (76) wireval -> . ID [ wireexpr ]
    (77) wireval -> . unaop wireval
    (82) wireval -> . ID
    (78) unaop -> . ~
    (79) unaop -> . &
    (80) unaop -> . ^
    (81) unaop -> . |

    ALLHIGH         shift and go to state 109
    ALLLOW          shift and go to state 110
    LITWIRE         shift and go to state 111
    NUMBER          shift and go to state 112
    {               shift and go to state 113
    (               shift and go to state 102
    ID              shift and go to state 101
    ~               shift and go to state 115
    &               shift and go to state 116
    ^               shift and go to state 117
    |               shift and go to state 118

    wireconcat                     shift and go to state 164
    wireexpr                       shift and go to state 165
    wireval                        shift and go to state 108
    unaop                          shift and go to state 114

state 114

    (77) wireval -> unaop . wireval
    (69) wireval -> . ALLHIGH
    (70) wireval -> . ALLLOW
    (71) wireval -> . LITWIRE
    (72) wireval -> . NUMBER
    (73) wireval -> . { wireconcat }
    (74) wireval -> . ( wireexpr )
    (75) wireval -> . ID [ arithexpr : arithexpr ]
    (76) wireval -> . ID [ wireexpr ]
    (77) wireval -> . unaop wireval
    (82) wireval -> . ID
    (78) unaop -> . ~
    (79) unaop -> . &
    (80) unaop -> . ^
    (81) unaop -> . |

    ALLHIGH         shift and go to state 109
    ALLLOW          shift and go to state 110
    LITWIRE         shift and go to state 111
    NUMBER          shift and go to state 112
    {               shift and go to state 113
    (               shift and go to state 102
    ID              shift and go to state 101
    ~               shift and go to state 115
    &               shift and go to state 116
    ^               shift and go to state 117
    |               shift and go to state 118

    unaop                          shift and go to state 114
    wireval                        shift and go to state 166

state 115

    (78) unaop -> ~ .

    ALLHIGH         reduce using rule 78 (unaop -> ~ .)
    ALLLOW          reduce using rule 78 (unaop -> ~ .)
    LITWIRE         reduce using rule 78 (unaop -> ~ .)
    NUMBER          reduce using rule 78 (unaop -> ~ .)
    {               reduce using rule 78 (unaop -> ~ .)
    (               reduce using rule 78 (unaop -> ~ .)
    ID              reduce using rule 78 (unaop -> ~ .)
    ~               reduce using rule 78 (unaop -> ~ .)
    &               reduce using rule 78 (unaop -> ~ .)
    ^               reduce using rule 78 (unaop -> ~ .)
    |               reduce using rule 78 (unaop -> ~ .)


state 116

    (79) unaop -> & .

    ALLHIGH         reduce using rule 79 (unaop -> & .)
    ALLLOW          reduce using rule 79 (unaop -> & .)
    LITWIRE         reduce using rule 79 (unaop -> & .)
    NUMBER          reduce using rule 79 (unaop -> & .)
    {               reduce using rule 79 (unaop -> & .)
    (               reduce using rule 79 (unaop -> & .)
    ID              reduce using rule 79 (unaop -> & .)
    ~               reduce using rule 79 (unaop -> & .)
    &               reduce using rule 79 (unaop -> & .)
    ^               reduce using rule 79 (unaop -> & .)
    |               reduce using rule 79 (unaop -> & .)


state 117

    (80) unaop -> ^ .

    ALLHIGH         reduce using rule 80 (unaop -> ^ .)
    ALLLOW          reduce using rule 80 (unaop -> ^ .)
    LITWIRE         reduce using rule 80 (unaop -> ^ .)
    NUMBER          reduce using rule 80 (unaop -> ^ .)
    {               reduce using rule 80 (unaop -> ^ .)
    (               reduce using rule 80 (unaop -> ^ .)
    ID              reduce using rule 80 (unaop -> ^ .)
    ~               reduce using rule 80 (unaop -> ^ .)
    &               reduce using rule 80 (unaop -> ^ .)
    ^               reduce using rule 80 (unaop -> ^ .)
    |               reduce using rule 80 (unaop -> ^ .)


state 118

    (81) unaop -> | .

    ALLHIGH         reduce using rule 81 (unaop -> | .)
    ALLLOW          reduce using rule 81 (unaop -> | .)
    LITWIRE         reduce using rule 81 (unaop -> | .)
    NUMBER          reduce using rule 81 (unaop -> | .)
    {               reduce using rule 81 (unaop -> | .)
    (               reduce using rule 81 (unaop -> | .)
    ID              reduce using rule 81 (unaop -> | .)
    ~               reduce using rule 81 (unaop -> | .)
    &               reduce using rule 81 (unaop -> | .)
    ^               reduce using rule 81 (unaop -> | .)
    |               reduce using rule 81 (unaop -> | .)


state 119

    (33) wiredec -> wiretype [ arithexpr : . arithexpr ] idassigns
    (34) wiredec -> wiretype [ arithexpr : . arithexpr ] ID [ arithexpr : arithexpr ]
    (11) arithexpr -> . NUMBER
    (12) arithexpr -> . ID

    NUMBER          shift and go to state 71
    ID              shift and go to state 72

    arithexpr                      shift and go to state 167

state 120

    (39) oneidassign -> ID = wireexpr .

    ,               reduce using rule 39 (oneidassign -> ID = wireexpr .)
    ;               reduce using rule 39 (oneidassign -> ID = wireexpr .)


state 121

    (37) idassigns -> oneidassign , idassigns .

    ;               reduce using rule 37 (idassigns -> oneidassign , idassigns .)


state 122

    (43) assign -> ASSIGN lhs = wireexpr .

    ;               reduce using rule 43 (assign -> ASSIGN lhs = wireexpr .)


state 123

    (62) lhs -> ID [ arithexpr . : arithexpr ]

    :               shift and go to state 168


state 124

    (63) lhs -> { lhsconcat } .

    =               reduce using rule 63 (lhs -> { lhsconcat } .)
    ,               reduce using rule 63 (lhs -> { lhsconcat } .)
    }               reduce using rule 63 (lhs -> { lhsconcat } .)
    NONBLOCK        reduce using rule 63 (lhs -> { lhsconcat } .)


state 125

    (65) lhsconcat -> lhs , . lhsconcat
    (64) lhsconcat -> . lhs
    (65) lhsconcat -> . lhs , lhsconcat
    (61) lhs -> . ID
    (62) lhs -> . ID [ arithexpr : arithexpr ]
    (63) lhs -> . { lhsconcat }

    ID              shift and go to state 57
    {               shift and go to state 58

    lhs                            shift and go to state 84
    lhsconcat                      shift and go to state 169

state 126

    (44) always -> ALWAYS @ sensitivity alwayscontblock .

    ASSIGN          reduce using rule 44 (always -> ALWAYS @ sensitivity alwayscontblock .)
    ALWAYS          reduce using rule 44 (always -> ALWAYS @ sensitivity alwayscontblock .)
    ALWAYSFF        reduce using rule 44 (always -> ALWAYS @ sensitivity alwayscontblock .)
    ALWAYSCOMB      reduce using rule 44 (always -> ALWAYS @ sensitivity alwayscontblock .)
    ID              reduce using rule 44 (always -> ALWAYS @ sensitivity alwayscontblock .)
    WIRE            reduce using rule 44 (always -> ALWAYS @ sensitivity alwayscontblock .)
    REG             reduce using rule 44 (always -> ALWAYS @ sensitivity alwayscontblock .)
    LOGIC           reduce using rule 44 (always -> ALWAYS @ sensitivity alwayscontblock .)
    ENDMODULE       reduce using rule 44 (always -> ALWAYS @ sensitivity alwayscontblock .)


state 127

    (47) sensitivity -> ( edge . ID )

    ID              shift and go to state 170


state 128

    (48) edge -> POSEDGE .

    ID              reduce using rule 48 (edge -> POSEDGE .)


state 129

    (49) edge -> NEGEDGE .

    ID              reduce using rule 49 (edge -> NEGEDGE .)


state 130

    (45) always -> ALWAYSFF @ sensitivity alwayscontblock .

    ASSIGN          reduce using rule 45 (always -> ALWAYSFF @ sensitivity alwayscontblock .)
    ALWAYS          reduce using rule 45 (always -> ALWAYSFF @ sensitivity alwayscontblock .)
    ALWAYSFF        reduce using rule 45 (always -> ALWAYSFF @ sensitivity alwayscontblock .)
    ALWAYSCOMB      reduce using rule 45 (always -> ALWAYSFF @ sensitivity alwayscontblock .)
    ID              reduce using rule 45 (always -> ALWAYSFF @ sensitivity alwayscontblock .)
    WIRE            reduce using rule 45 (always -> ALWAYSFF @ sensitivity alwayscontblock .)
    REG             reduce using rule 45 (always -> ALWAYSFF @ sensitivity alwayscontblock .)
    LOGIC           reduce using rule 45 (always -> ALWAYSFF @ sensitivity alwayscontblock .)
    ENDMODULE       reduce using rule 45 (always -> ALWAYSFF @ sensitivity alwayscontblock .)


state 131

    (50) alwayscontblock -> BEGIN alwayscont END .

    ASSIGN          reduce using rule 50 (alwayscontblock -> BEGIN alwayscont END .)
    ALWAYS          reduce using rule 50 (alwayscontblock -> BEGIN alwayscont END .)
    ALWAYSFF        reduce using rule 50 (alwayscontblock -> BEGIN alwayscont END .)
    ALWAYSCOMB      reduce using rule 50 (alwayscontblock -> BEGIN alwayscont END .)
    ID              reduce using rule 50 (alwayscontblock -> BEGIN alwayscont END .)
    WIRE            reduce using rule 50 (alwayscontblock -> BEGIN alwayscont END .)
    REG             reduce using rule 50 (alwayscontblock -> BEGIN alwayscont END .)
    LOGIC           reduce using rule 50 (alwayscontblock -> BEGIN alwayscont END .)
    ENDMODULE       reduce using rule 50 (alwayscontblock -> BEGIN alwayscont END .)


state 132

    (51) alwayscont -> oneassign ; . alwayscont
    (51) alwayscont -> . oneassign ; alwayscont
    (52) alwayscont -> . ifblock alwayscont
    (53) alwayscont -> . ifblock elseblock alwayscont
    (54) alwayscont -> . empty
    (55) oneassign -> . lhs = wireexpr
    (56) oneassign -> . lhs NONBLOCK wireexpr
    (57) ifblock -> . IF ( wireexpr ) BEGIN alwayscont END
    (104) empty -> .
    (61) lhs -> . ID
    (62) lhs -> . ID [ arithexpr : arithexpr ]
    (63) lhs -> . { lhsconcat }

    IF              shift and go to state 93
    END             reduce using rule 104 (empty -> .)
    ID              shift and go to state 57
    {               shift and go to state 58

    oneassign                      shift and go to state 89
    alwayscont                     shift and go to state 171
    ifblock                        shift and go to state 90
    empty                          shift and go to state 91
    lhs                            shift and go to state 92

state 133

    (52) alwayscont -> ifblock alwayscont .

    END             reduce using rule 52 (alwayscont -> ifblock alwayscont .)


state 134

    (53) alwayscont -> ifblock elseblock . alwayscont
    (51) alwayscont -> . oneassign ; alwayscont
    (52) alwayscont -> . ifblock alwayscont
    (53) alwayscont -> . ifblock elseblock alwayscont
    (54) alwayscont -> . empty
    (55) oneassign -> . lhs = wireexpr
    (56) oneassign -> . lhs NONBLOCK wireexpr
    (57) ifblock -> . IF ( wireexpr ) BEGIN alwayscont END
    (104) empty -> .
    (61) lhs -> . ID
    (62) lhs -> . ID [ arithexpr : arithexpr ]
    (63) lhs -> . { lhsconcat }

    IF              shift and go to state 93
    END             reduce using rule 104 (empty -> .)
    ID              shift and go to state 57
    {               shift and go to state 58

    ifblock                        shift and go to state 90
    alwayscont                     shift and go to state 172
    oneassign                      shift and go to state 89
    empty                          shift and go to state 91
    lhs                            shift and go to state 92

state 135

    (58) elseblock -> ELSE . ifblock
    (59) elseblock -> ELSE . ifblock elseblock
    (60) elseblock -> ELSE . BEGIN alwayscont END
    (57) ifblock -> . IF ( wireexpr ) BEGIN alwayscont END

    BEGIN           shift and go to state 174
    IF              shift and go to state 93

    ifblock                        shift and go to state 173

state 136

    (55) oneassign -> lhs = . wireexpr
    (66) wireexpr -> . wireval
    (67) wireexpr -> . wireval wireop wireexpr
    (68) wireexpr -> . wireval ? wireexpr : wireexpr
    (69) wireval -> . ALLHIGH
    (70) wireval -> . ALLLOW
    (71) wireval -> . LITWIRE
    (72) wireval -> . NUMBER
    (73) wireval -> . { wireconcat }
    (74) wireval -> . ( wireexpr )
    (75) wireval -> . ID [ arithexpr : arithexpr ]
    (76) wireval -> . ID [ wireexpr ]
    (77) wireval -> . unaop wireval
    (82) wireval -> . ID
    (78) unaop -> . ~
    (79) unaop -> . &
    (80) unaop -> . ^
    (81) unaop -> . |

    ALLHIGH         shift and go to state 109
    ALLLOW          shift and go to state 110
    LITWIRE         shift and go to state 111
    NUMBER          shift and go to state 112
    {               shift and go to state 113
    (               shift and go to state 102
    ID              shift and go to state 101
    ~               shift and go to state 115
    &               shift and go to state 116
    ^               shift and go to state 117
    |               shift and go to state 118

    wireexpr                       shift and go to state 175
    wireval                        shift and go to state 108
    unaop                          shift and go to state 114

state 137

    (56) oneassign -> lhs NONBLOCK . wireexpr
    (66) wireexpr -> . wireval
    (67) wireexpr -> . wireval wireop wireexpr
    (68) wireexpr -> . wireval ? wireexpr : wireexpr
    (69) wireval -> . ALLHIGH
    (70) wireval -> . ALLLOW
    (71) wireval -> . LITWIRE
    (72) wireval -> . NUMBER
    (73) wireval -> . { wireconcat }
    (74) wireval -> . ( wireexpr )
    (75) wireval -> . ID [ arithexpr : arithexpr ]
    (76) wireval -> . ID [ wireexpr ]
    (77) wireval -> . unaop wireval
    (82) wireval -> . ID
    (78) unaop -> . ~
    (79) unaop -> . &
    (80) unaop -> . ^
    (81) unaop -> . |

    ALLHIGH         shift and go to state 109
    ALLLOW          shift and go to state 110
    LITWIRE         shift and go to state 111
    NUMBER          shift and go to state 112
    {               shift and go to state 113
    (               shift and go to state 102
    ID              shift and go to state 101
    ~               shift and go to state 115
    &               shift and go to state 116
    ^               shift and go to state 117
    |               shift and go to state 118

    wireexpr                       shift and go to state 176
    wireval                        shift and go to state 108
    unaop                          shift and go to state 114

state 138

    (57) ifblock -> IF ( . wireexpr ) BEGIN alwayscont END
    (66) wireexpr -> . wireval
    (67) wireexpr -> . wireval wireop wireexpr
    (68) wireexpr -> . wireval ? wireexpr : wireexpr
    (69) wireval -> . ALLHIGH
    (70) wireval -> . ALLLOW
    (71) wireval -> . LITWIRE
    (72) wireval -> . NUMBER
    (73) wireval -> . { wireconcat }
    (74) wireval -> . ( wireexpr )
    (75) wireval -> . ID [ arithexpr : arithexpr ]
    (76) wireval -> . ID [ wireexpr ]
    (77) wireval -> . unaop wireval
    (82) wireval -> . ID
    (78) unaop -> . ~
    (79) unaop -> . &
    (80) unaop -> . ^
    (81) unaop -> . |

    ALLHIGH         shift and go to state 109
    ALLLOW          shift and go to state 110
    LITWIRE         shift and go to state 111
    NUMBER          shift and go to state 112
    {               shift and go to state 113
    (               shift and go to state 102
    ID              shift and go to state 101
    ~               shift and go to state 115
    &               shift and go to state 116
    ^               shift and go to state 117
    |               shift and go to state 118

    wireexpr                       shift and go to state 177
    wireval                        shift and go to state 108
    unaop                          shift and go to state 114

state 139

    (8) paramplus -> , oneparam paramplus .

    )               reduce using rule 8 (paramplus -> , oneparam paramplus .)


state 140

    (10) oneparam -> PARAMETER ID = arithexpr .

    ,               reduce using rule 10 (oneparam -> PARAMETER ID = arithexpr .)
    )               reduce using rule 10 (oneparam -> PARAMETER ID = arithexpr .)


state 141

    (19) idsterminal -> ID , idsterminal .

    [               reduce using rule 19 (idsterminal -> ID , idsterminal .)
    ID              reduce using rule 19 (idsterminal -> ID , idsterminal .)
    ;               reduce using rule 19 (idsterminal -> ID , idsterminal .)


state 142

    (21) portterminal -> , porttype .

    [               reduce using rule 21 (portterminal -> , porttype .)
    ID              reduce using rule 21 (portterminal -> , porttype .)
    ;               reduce using rule 21 (portterminal -> , porttype .)


state 143

    (22) wireslice -> [ arithexpr : arithexpr . ]

    ]               shift and go to state 178


state 144

    (75) wireval -> ID [ . arithexpr : arithexpr ]
    (76) wireval -> ID [ . wireexpr ]
    (11) arithexpr -> . NUMBER
    (12) arithexpr -> . ID
    (66) wireexpr -> . wireval
    (67) wireexpr -> . wireval wireop wireexpr
    (68) wireexpr -> . wireval ? wireexpr : wireexpr
    (69) wireval -> . ALLHIGH
    (70) wireval -> . ALLLOW
    (71) wireval -> . LITWIRE
    (72) wireval -> . NUMBER
    (73) wireval -> . { wireconcat }
    (74) wireval -> . ( wireexpr )
    (75) wireval -> . ID [ arithexpr : arithexpr ]
    (76) wireval -> . ID [ wireexpr ]
    (77) wireval -> . unaop wireval
    (82) wireval -> . ID
    (78) unaop -> . ~
    (79) unaop -> . &
    (80) unaop -> . ^
    (81) unaop -> . |

    NUMBER          shift and go to state 182
    ID              shift and go to state 179
    ALLHIGH         shift and go to state 109
    ALLLOW          shift and go to state 110
    LITWIRE         shift and go to state 111
    {               shift and go to state 113
    (               shift and go to state 102
    ~               shift and go to state 115
    &               shift and go to state 116
    ^               shift and go to state 117
    |               shift and go to state 118

    arithexpr                      shift and go to state 180
    wireexpr                       shift and go to state 181
    wireval                        shift and go to state 108
    unaop                          shift and go to state 114

state 145

    (74) wireval -> ( wireexpr . )

    )               shift and go to state 183


state 146

    (98) moduleinst -> ID ID ( modportassign ) .

    ;               reduce using rule 98 (moduleinst -> ID ID ( modportassign ) .)


state 147

    (100) modportassign -> oneportassign , . modportassign
    (99) modportassign -> . oneportassign
    (100) modportassign -> . oneportassign , modportassign
    (101) modportassign -> . empty
    (102) oneportassign -> . wireexpr
    (103) oneportassign -> . . ID ( wireexpr )
    (104) empty -> .
    (66) wireexpr -> . wireval
    (67) wireexpr -> . wireval wireop wireexpr
    (68) wireexpr -> . wireval ? wireexpr : wireexpr
    (69) wireval -> . ALLHIGH
    (70) wireval -> . ALLLOW
    (71) wireval -> . LITWIRE
    (72) wireval -> . NUMBER
    (73) wireval -> . { wireconcat }
    (74) wireval -> . ( wireexpr )
    (75) wireval -> . ID [ arithexpr : arithexpr ]
    (76) wireval -> . ID [ wireexpr ]
    (77) wireval -> . unaop wireval
    (82) wireval -> . ID
    (78) unaop -> . ~
    (79) unaop -> . &
    (80) unaop -> . ^
    (81) unaop -> . |

    .               shift and go to state 107
    )               reduce using rule 104 (empty -> .)
    ALLHIGH         shift and go to state 109
    ALLLOW          shift and go to state 110
    LITWIRE         shift and go to state 111
    NUMBER          shift and go to state 112
    {               shift and go to state 113
    (               shift and go to state 102
    ID              shift and go to state 101
    ~               shift and go to state 115
    &               shift and go to state 116
    ^               shift and go to state 117
    |               shift and go to state 118

    oneportassign                  shift and go to state 104
    modportassign                  shift and go to state 184
    empty                          shift and go to state 105
    wireexpr                       shift and go to state 106
    wireval                        shift and go to state 108
    unaop                          shift and go to state 114

state 148

    (103) oneportassign -> . ID . ( wireexpr )

    (               shift and go to state 185


state 149

    (67) wireexpr -> wireval wireop . wireexpr
    (66) wireexpr -> . wireval
    (67) wireexpr -> . wireval wireop wireexpr
    (68) wireexpr -> . wireval ? wireexpr : wireexpr
    (69) wireval -> . ALLHIGH
    (70) wireval -> . ALLLOW
    (71) wireval -> . LITWIRE
    (72) wireval -> . NUMBER
    (73) wireval -> . { wireconcat }
    (74) wireval -> . ( wireexpr )
    (75) wireval -> . ID [ arithexpr : arithexpr ]
    (76) wireval -> . ID [ wireexpr ]
    (77) wireval -> . unaop wireval
    (82) wireval -> . ID
    (78) unaop -> . ~
    (79) unaop -> . &
    (80) unaop -> . ^
    (81) unaop -> . |

    ALLHIGH         shift and go to state 109
    ALLLOW          shift and go to state 110
    LITWIRE         shift and go to state 111
    NUMBER          shift and go to state 112
    {               shift and go to state 113
    (               shift and go to state 102
    ID              shift and go to state 101
    ~               shift and go to state 115
    &               shift and go to state 116
    ^               shift and go to state 117
    |               shift and go to state 118

    wireval                        shift and go to state 108
    wireexpr                       shift and go to state 186
    unaop                          shift and go to state 114

state 150

    (68) wireexpr -> wireval ? . wireexpr : wireexpr
    (66) wireexpr -> . wireval
    (67) wireexpr -> . wireval wireop wireexpr
    (68) wireexpr -> . wireval ? wireexpr : wireexpr
    (69) wireval -> . ALLHIGH
    (70) wireval -> . ALLLOW
    (71) wireval -> . LITWIRE
    (72) wireval -> . NUMBER
    (73) wireval -> . { wireconcat }
    (74) wireval -> . ( wireexpr )
    (75) wireval -> . ID [ arithexpr : arithexpr ]
    (76) wireval -> . ID [ wireexpr ]
    (77) wireval -> . unaop wireval
    (82) wireval -> . ID
    (78) unaop -> . ~
    (79) unaop -> . &
    (80) unaop -> . ^
    (81) unaop -> . |

    ALLHIGH         shift and go to state 109
    ALLLOW          shift and go to state 110
    LITWIRE         shift and go to state 111
    NUMBER          shift and go to state 112
    {               shift and go to state 113
    (               shift and go to state 102
    ID              shift and go to state 101
    ~               shift and go to state 115
    &               shift and go to state 116
    ^               shift and go to state 117
    |               shift and go to state 118

    wireval                        shift and go to state 108
    wireexpr                       shift and go to state 187
    unaop                          shift and go to state 114

state 151

    (85) wireop -> + .

    ALLHIGH         reduce using rule 85 (wireop -> + .)
    ALLLOW          reduce using rule 85 (wireop -> + .)
    LITWIRE         reduce using rule 85 (wireop -> + .)
    NUMBER          reduce using rule 85 (wireop -> + .)
    {               reduce using rule 85 (wireop -> + .)
    (               reduce using rule 85 (wireop -> + .)
    ID              reduce using rule 85 (wireop -> + .)
    ~               reduce using rule 85 (wireop -> + .)
    &               reduce using rule 85 (wireop -> + .)
    ^               reduce using rule 85 (wireop -> + .)
    |               reduce using rule 85 (wireop -> + .)


state 152

    (86) wireop -> - .

    ALLHIGH         reduce using rule 86 (wireop -> - .)
    ALLLOW          reduce using rule 86 (wireop -> - .)
    LITWIRE         reduce using rule 86 (wireop -> - .)
    NUMBER          reduce using rule 86 (wireop -> - .)
    {               reduce using rule 86 (wireop -> - .)
    (               reduce using rule 86 (wireop -> - .)
    ID              reduce using rule 86 (wireop -> - .)
    ~               reduce using rule 86 (wireop -> - .)
    &               reduce using rule 86 (wireop -> - .)
    ^               reduce using rule 86 (wireop -> - .)
    |               reduce using rule 86 (wireop -> - .)


state 153

    (87) wireop -> * .

    ALLHIGH         reduce using rule 87 (wireop -> * .)
    ALLLOW          reduce using rule 87 (wireop -> * .)
    LITWIRE         reduce using rule 87 (wireop -> * .)
    NUMBER          reduce using rule 87 (wireop -> * .)
    {               reduce using rule 87 (wireop -> * .)
    (               reduce using rule 87 (wireop -> * .)
    ID              reduce using rule 87 (wireop -> * .)
    ~               reduce using rule 87 (wireop -> * .)
    &               reduce using rule 87 (wireop -> * .)
    ^               reduce using rule 87 (wireop -> * .)
    |               reduce using rule 87 (wireop -> * .)


state 154

    (88) wireop -> & .

    ALLHIGH         reduce using rule 88 (wireop -> & .)
    ALLLOW          reduce using rule 88 (wireop -> & .)
    LITWIRE         reduce using rule 88 (wireop -> & .)
    NUMBER          reduce using rule 88 (wireop -> & .)
    {               reduce using rule 88 (wireop -> & .)
    (               reduce using rule 88 (wireop -> & .)
    ID              reduce using rule 88 (wireop -> & .)
    ~               reduce using rule 88 (wireop -> & .)
    &               reduce using rule 88 (wireop -> & .)
    ^               reduce using rule 88 (wireop -> & .)
    |               reduce using rule 88 (wireop -> & .)


state 155

    (89) wireop -> | .

    ALLHIGH         reduce using rule 89 (wireop -> | .)
    ALLLOW          reduce using rule 89 (wireop -> | .)
    LITWIRE         reduce using rule 89 (wireop -> | .)
    NUMBER          reduce using rule 89 (wireop -> | .)
    {               reduce using rule 89 (wireop -> | .)
    (               reduce using rule 89 (wireop -> | .)
    ID              reduce using rule 89 (wireop -> | .)
    ~               reduce using rule 89 (wireop -> | .)
    &               reduce using rule 89 (wireop -> | .)
    ^               reduce using rule 89 (wireop -> | .)
    |               reduce using rule 89 (wireop -> | .)


state 156

    (90) wireop -> ^ .

    ALLHIGH         reduce using rule 90 (wireop -> ^ .)
    ALLLOW          reduce using rule 90 (wireop -> ^ .)
    LITWIRE         reduce using rule 90 (wireop -> ^ .)
    NUMBER          reduce using rule 90 (wireop -> ^ .)
    {               reduce using rule 90 (wireop -> ^ .)
    (               reduce using rule 90 (wireop -> ^ .)
    ID              reduce using rule 90 (wireop -> ^ .)
    ~               reduce using rule 90 (wireop -> ^ .)
    &               reduce using rule 90 (wireop -> ^ .)
    ^               reduce using rule 90 (wireop -> ^ .)
    |               reduce using rule 90 (wireop -> ^ .)


state 157

    (91) wireop -> < .

    ALLHIGH         reduce using rule 91 (wireop -> < .)
    ALLLOW          reduce using rule 91 (wireop -> < .)
    LITWIRE         reduce using rule 91 (wireop -> < .)
    NUMBER          reduce using rule 91 (wireop -> < .)
    {               reduce using rule 91 (wireop -> < .)
    (               reduce using rule 91 (wireop -> < .)
    ID              reduce using rule 91 (wireop -> < .)
    ~               reduce using rule 91 (wireop -> < .)
    &               reduce using rule 91 (wireop -> < .)
    ^               reduce using rule 91 (wireop -> < .)
    |               reduce using rule 91 (wireop -> < .)


state 158

    (92) wireop -> > .

    ALLHIGH         reduce using rule 92 (wireop -> > .)
    ALLLOW          reduce using rule 92 (wireop -> > .)
    LITWIRE         reduce using rule 92 (wireop -> > .)
    NUMBER          reduce using rule 92 (wireop -> > .)
    {               reduce using rule 92 (wireop -> > .)
    (               reduce using rule 92 (wireop -> > .)
    ID              reduce using rule 92 (wireop -> > .)
    ~               reduce using rule 92 (wireop -> > .)
    &               reduce using rule 92 (wireop -> > .)
    ^               reduce using rule 92 (wireop -> > .)
    |               reduce using rule 92 (wireop -> > .)


state 159

    (93) wireop -> LSHIFT .

    ALLHIGH         reduce using rule 93 (wireop -> LSHIFT .)
    ALLLOW          reduce using rule 93 (wireop -> LSHIFT .)
    LITWIRE         reduce using rule 93 (wireop -> LSHIFT .)
    NUMBER          reduce using rule 93 (wireop -> LSHIFT .)
    {               reduce using rule 93 (wireop -> LSHIFT .)
    (               reduce using rule 93 (wireop -> LSHIFT .)
    ID              reduce using rule 93 (wireop -> LSHIFT .)
    ~               reduce using rule 93 (wireop -> LSHIFT .)
    &               reduce using rule 93 (wireop -> LSHIFT .)
    ^               reduce using rule 93 (wireop -> LSHIFT .)
    |               reduce using rule 93 (wireop -> LSHIFT .)


state 160

    (94) wireop -> RSHIFT .

    ALLHIGH         reduce using rule 94 (wireop -> RSHIFT .)
    ALLLOW          reduce using rule 94 (wireop -> RSHIFT .)
    LITWIRE         reduce using rule 94 (wireop -> RSHIFT .)
    NUMBER          reduce using rule 94 (wireop -> RSHIFT .)
    {               reduce using rule 94 (wireop -> RSHIFT .)
    (               reduce using rule 94 (wireop -> RSHIFT .)
    ID              reduce using rule 94 (wireop -> RSHIFT .)
    ~               reduce using rule 94 (wireop -> RSHIFT .)
    &               reduce using rule 94 (wireop -> RSHIFT .)
    ^               reduce using rule 94 (wireop -> RSHIFT .)
    |               reduce using rule 94 (wireop -> RSHIFT .)


state 161

    (95) wireop -> EQ .

    ALLHIGH         reduce using rule 95 (wireop -> EQ .)
    ALLLOW          reduce using rule 95 (wireop -> EQ .)
    LITWIRE         reduce using rule 95 (wireop -> EQ .)
    NUMBER          reduce using rule 95 (wireop -> EQ .)
    {               reduce using rule 95 (wireop -> EQ .)
    (               reduce using rule 95 (wireop -> EQ .)
    ID              reduce using rule 95 (wireop -> EQ .)
    ~               reduce using rule 95 (wireop -> EQ .)
    &               reduce using rule 95 (wireop -> EQ .)
    ^               reduce using rule 95 (wireop -> EQ .)
    |               reduce using rule 95 (wireop -> EQ .)


state 162

    (96) wireop -> GEQ .

    ALLHIGH         reduce using rule 96 (wireop -> GEQ .)
    ALLLOW          reduce using rule 96 (wireop -> GEQ .)
    LITWIRE         reduce using rule 96 (wireop -> GEQ .)
    NUMBER          reduce using rule 96 (wireop -> GEQ .)
    {               reduce using rule 96 (wireop -> GEQ .)
    (               reduce using rule 96 (wireop -> GEQ .)
    ID              reduce using rule 96 (wireop -> GEQ .)
    ~               reduce using rule 96 (wireop -> GEQ .)
    &               reduce using rule 96 (wireop -> GEQ .)
    ^               reduce using rule 96 (wireop -> GEQ .)
    |               reduce using rule 96 (wireop -> GEQ .)


state 163

    (97) wireop -> LEQ .

    ALLHIGH         reduce using rule 97 (wireop -> LEQ .)
    ALLLOW          reduce using rule 97 (wireop -> LEQ .)
    LITWIRE         reduce using rule 97 (wireop -> LEQ .)
    NUMBER          reduce using rule 97 (wireop -> LEQ .)
    {               reduce using rule 97 (wireop -> LEQ .)
    (               reduce using rule 97 (wireop -> LEQ .)
    ID              reduce using rule 97 (wireop -> LEQ .)
    ~               reduce using rule 97 (wireop -> LEQ .)
    &               reduce using rule 97 (wireop -> LEQ .)
    ^               reduce using rule 97 (wireop -> LEQ .)
    |               reduce using rule 97 (wireop -> LEQ .)


state 164

    (73) wireval -> { wireconcat . }

    }               shift and go to state 188


state 165

    (83) wireconcat -> wireexpr .
    (84) wireconcat -> wireexpr . , wireconcat

    }               reduce using rule 83 (wireconcat -> wireexpr .)
    ,               shift and go to state 189


state 166

    (77) wireval -> unaop wireval .

    ?               reduce using rule 77 (wireval -> unaop wireval .)
    +               reduce using rule 77 (wireval -> unaop wireval .)
    -               reduce using rule 77 (wireval -> unaop wireval .)
    *               reduce using rule 77 (wireval -> unaop wireval .)
    &               reduce using rule 77 (wireval -> unaop wireval .)
    |               reduce using rule 77 (wireval -> unaop wireval .)
    ^               reduce using rule 77 (wireval -> unaop wireval .)
    <               reduce using rule 77 (wireval -> unaop wireval .)
    >               reduce using rule 77 (wireval -> unaop wireval .)
    LSHIFT          reduce using rule 77 (wireval -> unaop wireval .)
    RSHIFT          reduce using rule 77 (wireval -> unaop wireval .)
    EQ              reduce using rule 77 (wireval -> unaop wireval .)
    GEQ             reduce using rule 77 (wireval -> unaop wireval .)
    LEQ             reduce using rule 77 (wireval -> unaop wireval .)
    ,               reduce using rule 77 (wireval -> unaop wireval .)
    )               reduce using rule 77 (wireval -> unaop wireval .)
    ;               reduce using rule 77 (wireval -> unaop wireval .)
    }               reduce using rule 77 (wireval -> unaop wireval .)
    ]               reduce using rule 77 (wireval -> unaop wireval .)
    :               reduce using rule 77 (wireval -> unaop wireval .)


state 167

    (33) wiredec -> wiretype [ arithexpr : arithexpr . ] idassigns
    (34) wiredec -> wiretype [ arithexpr : arithexpr . ] ID [ arithexpr : arithexpr ]

    ]               shift and go to state 190


state 168

    (62) lhs -> ID [ arithexpr : . arithexpr ]
    (11) arithexpr -> . NUMBER
    (12) arithexpr -> . ID

    NUMBER          shift and go to state 71
    ID              shift and go to state 72

    arithexpr                      shift and go to state 191

state 169

    (65) lhsconcat -> lhs , lhsconcat .

    }               reduce using rule 65 (lhsconcat -> lhs , lhsconcat .)


state 170

    (47) sensitivity -> ( edge ID . )

    )               shift and go to state 192


state 171

    (51) alwayscont -> oneassign ; alwayscont .

    END             reduce using rule 51 (alwayscont -> oneassign ; alwayscont .)


state 172

    (53) alwayscont -> ifblock elseblock alwayscont .

    END             reduce using rule 53 (alwayscont -> ifblock elseblock alwayscont .)


state 173

    (58) elseblock -> ELSE ifblock .
    (59) elseblock -> ELSE ifblock . elseblock
    (58) elseblock -> . ELSE ifblock
    (59) elseblock -> . ELSE ifblock elseblock
    (60) elseblock -> . ELSE BEGIN alwayscont END

    IF              reduce using rule 58 (elseblock -> ELSE ifblock .)
    ID              reduce using rule 58 (elseblock -> ELSE ifblock .)
    {               reduce using rule 58 (elseblock -> ELSE ifblock .)
    END             reduce using rule 58 (elseblock -> ELSE ifblock .)
    ELSE            shift and go to state 135

    elseblock                      shift and go to state 193

state 174

    (60) elseblock -> ELSE BEGIN . alwayscont END
    (51) alwayscont -> . oneassign ; alwayscont
    (52) alwayscont -> . ifblock alwayscont
    (53) alwayscont -> . ifblock elseblock alwayscont
    (54) alwayscont -> . empty
    (55) oneassign -> . lhs = wireexpr
    (56) oneassign -> . lhs NONBLOCK wireexpr
    (57) ifblock -> . IF ( wireexpr ) BEGIN alwayscont END
    (104) empty -> .
    (61) lhs -> . ID
    (62) lhs -> . ID [ arithexpr : arithexpr ]
    (63) lhs -> . { lhsconcat }

    IF              shift and go to state 93
    END             reduce using rule 104 (empty -> .)
    ID              shift and go to state 57
    {               shift and go to state 58

    alwayscont                     shift and go to state 194
    oneassign                      shift and go to state 89
    ifblock                        shift and go to state 90
    empty                          shift and go to state 91
    lhs                            shift and go to state 92

state 175

    (55) oneassign -> lhs = wireexpr .

    ;               reduce using rule 55 (oneassign -> lhs = wireexpr .)


state 176

    (56) oneassign -> lhs NONBLOCK wireexpr .

    ;               reduce using rule 56 (oneassign -> lhs NONBLOCK wireexpr .)


state 177

    (57) ifblock -> IF ( wireexpr . ) BEGIN alwayscont END

    )               shift and go to state 195


state 178

    (22) wireslice -> [ arithexpr : arithexpr ] .

    ID              reduce using rule 22 (wireslice -> [ arithexpr : arithexpr ] .)


state 179

    (12) arithexpr -> ID .
    (75) wireval -> ID . [ arithexpr : arithexpr ]
    (76) wireval -> ID . [ wireexpr ]
    (82) wireval -> ID .

    :               reduce using rule 12 (arithexpr -> ID .)
    [               shift and go to state 144
    ?               reduce using rule 82 (wireval -> ID .)
    +               reduce using rule 82 (wireval -> ID .)
    -               reduce using rule 82 (wireval -> ID .)
    *               reduce using rule 82 (wireval -> ID .)
    &               reduce using rule 82 (wireval -> ID .)
    |               reduce using rule 82 (wireval -> ID .)
    ^               reduce using rule 82 (wireval -> ID .)
    <               reduce using rule 82 (wireval -> ID .)
    >               reduce using rule 82 (wireval -> ID .)
    LSHIFT          reduce using rule 82 (wireval -> ID .)
    RSHIFT          reduce using rule 82 (wireval -> ID .)
    EQ              reduce using rule 82 (wireval -> ID .)
    GEQ             reduce using rule 82 (wireval -> ID .)
    LEQ             reduce using rule 82 (wireval -> ID .)
    ]               reduce using rule 82 (wireval -> ID .)


state 180

    (75) wireval -> ID [ arithexpr . : arithexpr ]

    :               shift and go to state 196


state 181

    (76) wireval -> ID [ wireexpr . ]

    ]               shift and go to state 197


state 182

    (11) arithexpr -> NUMBER .
    (72) wireval -> NUMBER .

    :               reduce using rule 11 (arithexpr -> NUMBER .)
    ?               reduce using rule 72 (wireval -> NUMBER .)
    +               reduce using rule 72 (wireval -> NUMBER .)
    -               reduce using rule 72 (wireval -> NUMBER .)
    *               reduce using rule 72 (wireval -> NUMBER .)
    &               reduce using rule 72 (wireval -> NUMBER .)
    |               reduce using rule 72 (wireval -> NUMBER .)
    ^               reduce using rule 72 (wireval -> NUMBER .)
    <               reduce using rule 72 (wireval -> NUMBER .)
    >               reduce using rule 72 (wireval -> NUMBER .)
    LSHIFT          reduce using rule 72 (wireval -> NUMBER .)
    RSHIFT          reduce using rule 72 (wireval -> NUMBER .)
    EQ              reduce using rule 72 (wireval -> NUMBER .)
    GEQ             reduce using rule 72 (wireval -> NUMBER .)
    LEQ             reduce using rule 72 (wireval -> NUMBER .)
    ]               reduce using rule 72 (wireval -> NUMBER .)


state 183

    (74) wireval -> ( wireexpr ) .

    ?               reduce using rule 74 (wireval -> ( wireexpr ) .)
    +               reduce using rule 74 (wireval -> ( wireexpr ) .)
    -               reduce using rule 74 (wireval -> ( wireexpr ) .)
    *               reduce using rule 74 (wireval -> ( wireexpr ) .)
    &               reduce using rule 74 (wireval -> ( wireexpr ) .)
    |               reduce using rule 74 (wireval -> ( wireexpr ) .)
    ^               reduce using rule 74 (wireval -> ( wireexpr ) .)
    <               reduce using rule 74 (wireval -> ( wireexpr ) .)
    >               reduce using rule 74 (wireval -> ( wireexpr ) .)
    LSHIFT          reduce using rule 74 (wireval -> ( wireexpr ) .)
    RSHIFT          reduce using rule 74 (wireval -> ( wireexpr ) .)
    EQ              reduce using rule 74 (wireval -> ( wireexpr ) .)
    GEQ             reduce using rule 74 (wireval -> ( wireexpr ) .)
    LEQ             reduce using rule 74 (wireval -> ( wireexpr ) .)
    ,               reduce using rule 74 (wireval -> ( wireexpr ) .)
    )               reduce using rule 74 (wireval -> ( wireexpr ) .)
    ;               reduce using rule 74 (wireval -> ( wireexpr ) .)
    }               reduce using rule 74 (wireval -> ( wireexpr ) .)
    ]               reduce using rule 74 (wireval -> ( wireexpr ) .)
    :               reduce using rule 74 (wireval -> ( wireexpr ) .)


state 184

    (100) modportassign -> oneportassign , modportassign .

    )               reduce using rule 100 (modportassign -> oneportassign , modportassign .)


state 185

    (103) oneportassign -> . ID ( . wireexpr )
    (66) wireexpr -> . wireval
    (67) wireexpr -> . wireval wireop wireexpr
    (68) wireexpr -> . wireval ? wireexpr : wireexpr
    (69) wireval -> . ALLHIGH
    (70) wireval -> . ALLLOW
    (71) wireval -> . LITWIRE
    (72) wireval -> . NUMBER
    (73) wireval -> . { wireconcat }
    (74) wireval -> . ( wireexpr )
    (75) wireval -> . ID [ arithexpr : arithexpr ]
    (76) wireval -> . ID [ wireexpr ]
    (77) wireval -> . unaop wireval
    (82) wireval -> . ID
    (78) unaop -> . ~
    (79) unaop -> . &
    (80) unaop -> . ^
    (81) unaop -> . |

    ALLHIGH         shift and go to state 109
    ALLLOW          shift and go to state 110
    LITWIRE         shift and go to state 111
    NUMBER          shift and go to state 112
    {               shift and go to state 113
    (               shift and go to state 102
    ID              shift and go to state 101
    ~               shift and go to state 115
    &               shift and go to state 116
    ^               shift and go to state 117
    |               shift and go to state 118

    wireexpr                       shift and go to state 198
    wireval                        shift and go to state 108
    unaop                          shift and go to state 114

state 186

    (67) wireexpr -> wireval wireop wireexpr .

    ,               reduce using rule 67 (wireexpr -> wireval wireop wireexpr .)
    )               reduce using rule 67 (wireexpr -> wireval wireop wireexpr .)
    ;               reduce using rule 67 (wireexpr -> wireval wireop wireexpr .)
    }               reduce using rule 67 (wireexpr -> wireval wireop wireexpr .)
    ]               reduce using rule 67 (wireexpr -> wireval wireop wireexpr .)
    :               reduce using rule 67 (wireexpr -> wireval wireop wireexpr .)


state 187

    (68) wireexpr -> wireval ? wireexpr . : wireexpr

    :               shift and go to state 199


state 188

    (73) wireval -> { wireconcat } .

    ?               reduce using rule 73 (wireval -> { wireconcat } .)
    +               reduce using rule 73 (wireval -> { wireconcat } .)
    -               reduce using rule 73 (wireval -> { wireconcat } .)
    *               reduce using rule 73 (wireval -> { wireconcat } .)
    &               reduce using rule 73 (wireval -> { wireconcat } .)
    |               reduce using rule 73 (wireval -> { wireconcat } .)
    ^               reduce using rule 73 (wireval -> { wireconcat } .)
    <               reduce using rule 73 (wireval -> { wireconcat } .)
    >               reduce using rule 73 (wireval -> { wireconcat } .)
    LSHIFT          reduce using rule 73 (wireval -> { wireconcat } .)
    RSHIFT          reduce using rule 73 (wireval -> { wireconcat } .)
    EQ              reduce using rule 73 (wireval -> { wireconcat } .)
    GEQ             reduce using rule 73 (wireval -> { wireconcat } .)
    LEQ             reduce using rule 73 (wireval -> { wireconcat } .)
    ,               reduce using rule 73 (wireval -> { wireconcat } .)
    )               reduce using rule 73 (wireval -> { wireconcat } .)
    ;               reduce using rule 73 (wireval -> { wireconcat } .)
    }               reduce using rule 73 (wireval -> { wireconcat } .)
    ]               reduce using rule 73 (wireval -> { wireconcat } .)
    :               reduce using rule 73 (wireval -> { wireconcat } .)


state 189

    (84) wireconcat -> wireexpr , . wireconcat
    (83) wireconcat -> . wireexpr
    (84) wireconcat -> . wireexpr , wireconcat
    (66) wireexpr -> . wireval
    (67) wireexpr -> . wireval wireop wireexpr
    (68) wireexpr -> . wireval ? wireexpr : wireexpr
    (69) wireval -> . ALLHIGH
    (70) wireval -> . ALLLOW
    (71) wireval -> . LITWIRE
    (72) wireval -> . NUMBER
    (73) wireval -> . { wireconcat }
    (74) wireval -> . ( wireexpr )
    (75) wireval -> . ID [ arithexpr : arithexpr ]
    (76) wireval -> . ID [ wireexpr ]
    (77) wireval -> . unaop wireval
    (82) wireval -> . ID
    (78) unaop -> . ~
    (79) unaop -> . &
    (80) unaop -> . ^
    (81) unaop -> . |

    ALLHIGH         shift and go to state 109
    ALLLOW          shift and go to state 110
    LITWIRE         shift and go to state 111
    NUMBER          shift and go to state 112
    {               shift and go to state 113
    (               shift and go to state 102
    ID              shift and go to state 101
    ~               shift and go to state 115
    &               shift and go to state 116
    ^               shift and go to state 117
    |               shift and go to state 118

    wireexpr                       shift and go to state 165
    wireconcat                     shift and go to state 200
    wireval                        shift and go to state 108
    unaop                          shift and go to state 114

state 190

    (33) wiredec -> wiretype [ arithexpr : arithexpr ] . idassigns
    (34) wiredec -> wiretype [ arithexpr : arithexpr ] . ID [ arithexpr : arithexpr ]
    (36) idassigns -> . oneidassign
    (37) idassigns -> . oneidassign , idassigns
    (38) oneidassign -> . ID
    (39) oneidassign -> . ID = wireexpr

    ID              shift and go to state 202

    idassigns                      shift and go to state 201
    oneidassign                    shift and go to state 55

state 191

    (62) lhs -> ID [ arithexpr : arithexpr . ]

    ]               shift and go to state 203


state 192

    (47) sensitivity -> ( edge ID ) .

    BEGIN           reduce using rule 47 (sensitivity -> ( edge ID ) .)


state 193

    (59) elseblock -> ELSE ifblock elseblock .

    IF              reduce using rule 59 (elseblock -> ELSE ifblock elseblock .)
    ID              reduce using rule 59 (elseblock -> ELSE ifblock elseblock .)
    {               reduce using rule 59 (elseblock -> ELSE ifblock elseblock .)
    END             reduce using rule 59 (elseblock -> ELSE ifblock elseblock .)


state 194

    (60) elseblock -> ELSE BEGIN alwayscont . END

    END             shift and go to state 204


state 195

    (57) ifblock -> IF ( wireexpr ) . BEGIN alwayscont END

    BEGIN           shift and go to state 205


state 196

    (75) wireval -> ID [ arithexpr : . arithexpr ]
    (11) arithexpr -> . NUMBER
    (12) arithexpr -> . ID

    NUMBER          shift and go to state 71
    ID              shift and go to state 72

    arithexpr                      shift and go to state 206

state 197

    (76) wireval -> ID [ wireexpr ] .

    ?               reduce using rule 76 (wireval -> ID [ wireexpr ] .)
    +               reduce using rule 76 (wireval -> ID [ wireexpr ] .)
    -               reduce using rule 76 (wireval -> ID [ wireexpr ] .)
    *               reduce using rule 76 (wireval -> ID [ wireexpr ] .)
    &               reduce using rule 76 (wireval -> ID [ wireexpr ] .)
    |               reduce using rule 76 (wireval -> ID [ wireexpr ] .)
    ^               reduce using rule 76 (wireval -> ID [ wireexpr ] .)
    <               reduce using rule 76 (wireval -> ID [ wireexpr ] .)
    >               reduce using rule 76 (wireval -> ID [ wireexpr ] .)
    LSHIFT          reduce using rule 76 (wireval -> ID [ wireexpr ] .)
    RSHIFT          reduce using rule 76 (wireval -> ID [ wireexpr ] .)
    EQ              reduce using rule 76 (wireval -> ID [ wireexpr ] .)
    GEQ             reduce using rule 76 (wireval -> ID [ wireexpr ] .)
    LEQ             reduce using rule 76 (wireval -> ID [ wireexpr ] .)
    ,               reduce using rule 76 (wireval -> ID [ wireexpr ] .)
    )               reduce using rule 76 (wireval -> ID [ wireexpr ] .)
    ;               reduce using rule 76 (wireval -> ID [ wireexpr ] .)
    }               reduce using rule 76 (wireval -> ID [ wireexpr ] .)
    ]               reduce using rule 76 (wireval -> ID [ wireexpr ] .)
    :               reduce using rule 76 (wireval -> ID [ wireexpr ] .)


state 198

    (103) oneportassign -> . ID ( wireexpr . )

    )               shift and go to state 207


state 199

    (68) wireexpr -> wireval ? wireexpr : . wireexpr
    (66) wireexpr -> . wireval
    (67) wireexpr -> . wireval wireop wireexpr
    (68) wireexpr -> . wireval ? wireexpr : wireexpr
    (69) wireval -> . ALLHIGH
    (70) wireval -> . ALLLOW
    (71) wireval -> . LITWIRE
    (72) wireval -> . NUMBER
    (73) wireval -> . { wireconcat }
    (74) wireval -> . ( wireexpr )
    (75) wireval -> . ID [ arithexpr : arithexpr ]
    (76) wireval -> . ID [ wireexpr ]
    (77) wireval -> . unaop wireval
    (82) wireval -> . ID
    (78) unaop -> . ~
    (79) unaop -> . &
    (80) unaop -> . ^
    (81) unaop -> . |

    ALLHIGH         shift and go to state 109
    ALLLOW          shift and go to state 110
    LITWIRE         shift and go to state 111
    NUMBER          shift and go to state 112
    {               shift and go to state 113
    (               shift and go to state 102
    ID              shift and go to state 101
    ~               shift and go to state 115
    &               shift and go to state 116
    ^               shift and go to state 117
    |               shift and go to state 118

    wireval                        shift and go to state 108
    wireexpr                       shift and go to state 208
    unaop                          shift and go to state 114

state 200

    (84) wireconcat -> wireexpr , wireconcat .

    }               reduce using rule 84 (wireconcat -> wireexpr , wireconcat .)


state 201

    (33) wiredec -> wiretype [ arithexpr : arithexpr ] idassigns .

    ;               reduce using rule 33 (wiredec -> wiretype [ arithexpr : arithexpr ] idassigns .)


state 202

    (34) wiredec -> wiretype [ arithexpr : arithexpr ] ID . [ arithexpr : arithexpr ]
    (38) oneidassign -> ID .
    (39) oneidassign -> ID . = wireexpr

    [               shift and go to state 209
    ,               reduce using rule 38 (oneidassign -> ID .)
    ;               reduce using rule 38 (oneidassign -> ID .)
    =               shift and go to state 79


state 203

    (62) lhs -> ID [ arithexpr : arithexpr ] .

    =               reduce using rule 62 (lhs -> ID [ arithexpr : arithexpr ] .)
    ,               reduce using rule 62 (lhs -> ID [ arithexpr : arithexpr ] .)
    }               reduce using rule 62 (lhs -> ID [ arithexpr : arithexpr ] .)
    NONBLOCK        reduce using rule 62 (lhs -> ID [ arithexpr : arithexpr ] .)


state 204

    (60) elseblock -> ELSE BEGIN alwayscont END .

    IF              reduce using rule 60 (elseblock -> ELSE BEGIN alwayscont END .)
    ID              reduce using rule 60 (elseblock -> ELSE BEGIN alwayscont END .)
    {               reduce using rule 60 (elseblock -> ELSE BEGIN alwayscont END .)
    END             reduce using rule 60 (elseblock -> ELSE BEGIN alwayscont END .)


state 205

    (57) ifblock -> IF ( wireexpr ) BEGIN . alwayscont END
    (51) alwayscont -> . oneassign ; alwayscont
    (52) alwayscont -> . ifblock alwayscont
    (53) alwayscont -> . ifblock elseblock alwayscont
    (54) alwayscont -> . empty
    (55) oneassign -> . lhs = wireexpr
    (56) oneassign -> . lhs NONBLOCK wireexpr
    (57) ifblock -> . IF ( wireexpr ) BEGIN alwayscont END
    (104) empty -> .
    (61) lhs -> . ID
    (62) lhs -> . ID [ arithexpr : arithexpr ]
    (63) lhs -> . { lhsconcat }

    IF              shift and go to state 93
    END             reduce using rule 104 (empty -> .)
    ID              shift and go to state 57
    {               shift and go to state 58

    alwayscont                     shift and go to state 210
    oneassign                      shift and go to state 89
    ifblock                        shift and go to state 90
    empty                          shift and go to state 91
    lhs                            shift and go to state 92

state 206

    (75) wireval -> ID [ arithexpr : arithexpr . ]

    ]               shift and go to state 211


state 207

    (103) oneportassign -> . ID ( wireexpr ) .

    ,               reduce using rule 103 (oneportassign -> . ID ( wireexpr ) .)
    )               reduce using rule 103 (oneportassign -> . ID ( wireexpr ) .)


state 208

    (68) wireexpr -> wireval ? wireexpr : wireexpr .

    ,               reduce using rule 68 (wireexpr -> wireval ? wireexpr : wireexpr .)
    )               reduce using rule 68 (wireexpr -> wireval ? wireexpr : wireexpr .)
    ;               reduce using rule 68 (wireexpr -> wireval ? wireexpr : wireexpr .)
    }               reduce using rule 68 (wireexpr -> wireval ? wireexpr : wireexpr .)
    ]               reduce using rule 68 (wireexpr -> wireval ? wireexpr : wireexpr .)
    :               reduce using rule 68 (wireexpr -> wireval ? wireexpr : wireexpr .)


state 209

    (34) wiredec -> wiretype [ arithexpr : arithexpr ] ID [ . arithexpr : arithexpr ]
    (11) arithexpr -> . NUMBER
    (12) arithexpr -> . ID

    NUMBER          shift and go to state 71
    ID              shift and go to state 72

    arithexpr                      shift and go to state 212

state 210

    (57) ifblock -> IF ( wireexpr ) BEGIN alwayscont . END

    END             shift and go to state 213


state 211

    (75) wireval -> ID [ arithexpr : arithexpr ] .

    ?               reduce using rule 75 (wireval -> ID [ arithexpr : arithexpr ] .)
    +               reduce using rule 75 (wireval -> ID [ arithexpr : arithexpr ] .)
    -               reduce using rule 75 (wireval -> ID [ arithexpr : arithexpr ] .)
    *               reduce using rule 75 (wireval -> ID [ arithexpr : arithexpr ] .)
    &               reduce using rule 75 (wireval -> ID [ arithexpr : arithexpr ] .)
    |               reduce using rule 75 (wireval -> ID [ arithexpr : arithexpr ] .)
    ^               reduce using rule 75 (wireval -> ID [ arithexpr : arithexpr ] .)
    <               reduce using rule 75 (wireval -> ID [ arithexpr : arithexpr ] .)
    >               reduce using rule 75 (wireval -> ID [ arithexpr : arithexpr ] .)
    LSHIFT          reduce using rule 75 (wireval -> ID [ arithexpr : arithexpr ] .)
    RSHIFT          reduce using rule 75 (wireval -> ID [ arithexpr : arithexpr ] .)
    EQ              reduce using rule 75 (wireval -> ID [ arithexpr : arithexpr ] .)
    GEQ             reduce using rule 75 (wireval -> ID [ arithexpr : arithexpr ] .)
    LEQ             reduce using rule 75 (wireval -> ID [ arithexpr : arithexpr ] .)
    ,               reduce using rule 75 (wireval -> ID [ arithexpr : arithexpr ] .)
    )               reduce using rule 75 (wireval -> ID [ arithexpr : arithexpr ] .)
    ;               reduce using rule 75 (wireval -> ID [ arithexpr : arithexpr ] .)
    }               reduce using rule 75 (wireval -> ID [ arithexpr : arithexpr ] .)
    ]               reduce using rule 75 (wireval -> ID [ arithexpr : arithexpr ] .)
    :               reduce using rule 75 (wireval -> ID [ arithexpr : arithexpr ] .)


state 212

    (34) wiredec -> wiretype [ arithexpr : arithexpr ] ID [ arithexpr . : arithexpr ]

    :               shift and go to state 214


state 213

    (57) ifblock -> IF ( wireexpr ) BEGIN alwayscont END .

    ELSE            reduce using rule 57 (ifblock -> IF ( wireexpr ) BEGIN alwayscont END .)
    IF              reduce using rule 57 (ifblock -> IF ( wireexpr ) BEGIN alwayscont END .)
    ID              reduce using rule 57 (ifblock -> IF ( wireexpr ) BEGIN alwayscont END .)
    {               reduce using rule 57 (ifblock -> IF ( wireexpr ) BEGIN alwayscont END .)
    END             reduce using rule 57 (ifblock -> IF ( wireexpr ) BEGIN alwayscont END .)


state 214

    (34) wiredec -> wiretype [ arithexpr : arithexpr ] ID [ arithexpr : . arithexpr ]
    (11) arithexpr -> . NUMBER
    (12) arithexpr -> . ID

    NUMBER          shift and go to state 71
    ID              shift and go to state 72

    arithexpr                      shift and go to state 215

state 215

    (34) wiredec -> wiretype [ arithexpr : arithexpr ] ID [ arithexpr : arithexpr . ]

    ]               shift and go to state 216


state 216

    (34) wiredec -> wiretype [ arithexpr : arithexpr ] ID [ arithexpr : arithexpr ] .

    ;               reduce using rule 34 (wiredec -> wiretype [ arithexpr : arithexpr ] ID [ arithexpr : arithexpr ] .)

